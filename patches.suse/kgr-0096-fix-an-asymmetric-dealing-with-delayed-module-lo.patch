From: Miroslav Benes <mbenes@suse.cz>
Date: Thu, 17 Mar 2016 14:04:12 +0100
Subject: kgr: fix an asymmetric dealing with delayed module loading
Patch-mainline: not yet, kgraft
References: fate#313296

When a patch module patches a function from a module and the module is
loaded in the system the patching is aborted if the function is not
present in the module. Conversely if the module is loaded after the
patch module there is no error reported now. Fix it by changing checks
in delayed module loading process. Do not call within_module() and let
kallsyms_lookup_name() in kgr_init_ftrace_ops() find out for cheap.

We'll also use objname instead of KGR_PATCH_SKIPPED state and function
address to find out if the function from the patch module belongs to the
module.

NOTE: it would be tempting to remove KGR_PATCH_SKIPPED state as it is
not used for anything significant in the code now. However from user
perspective it is useful to mark unused functions from the patch module
because their parent object is not loaded yet. Removal of
KGR_PATCH_SKIPPED would be possible but it would require non-trivial
changes in existing code and state semantics. It is not worth it.

Signed-off-by: Miroslav Benes <mbenes@suse.cz>
Reviewed-by: Petr Mladek <pmladek@suse.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 kernel/kgraft.c |   13 ++++---------
 1 file changed, 4 insertions(+), 9 deletions(-)

--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -1166,15 +1166,11 @@ static int kgr_handle_patch_for_loaded_m
 					       const struct module *mod)
 {
 	struct kgr_patch_fun *patch_fun;
-	unsigned long addr;
 	int err;
 
 	kgr_for_each_patch_fun(patch, patch_fun) {
-		if (patch_fun->state != KGR_PATCH_SKIPPED)
-			continue;
-
-		addr =  kallsyms_lookup_name(patch_fun->name);
-		if (!within_module(addr, mod))
+		if (!patch_fun->objname ||
+		    strcmp(patch_fun->objname, mod->name))
 			continue;
 
 		err = kgr_init_ftrace_ops(patch_fun);
@@ -1311,11 +1307,10 @@ static void kgr_handle_patch_for_going_m
 					     const struct module *mod)
 {
 	struct kgr_patch_fun *patch_fun;
-	unsigned long addr;
 
 	kgr_for_each_patch_fun(patch, patch_fun) {
-		addr = kallsyms_lookup_name(patch_fun->name);
-		if (!within_module(addr, mod))
+		if (!patch_fun->objname ||
+		    strcmp(patch_fun->objname, mod->name))
 			continue;
 
 		kgr_forced_code_patch_removal(patch_fun);
