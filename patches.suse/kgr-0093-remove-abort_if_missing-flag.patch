From: Miroslav Benes <mbenes@suse.cz>
Date: Thu, 17 Mar 2016 14:04:09 +0100
Subject: kgr: remove abort_if_missing flag
Patch-mainline: not yet, kgraft
References: fate#313296

abort_if_missing flag is intended to inform kgraft if it should abort
patching when the function is not found in current environment.
Typically set to 'true' for vmlinux functions and to 'false' for module
functions. We now have objname specified for each function and thus we
can remove the flag from the code. Object name is more suitable for the
task anyway.

This also allows us to remove FIXME in
kgr_handle_patch_for_going_module(). It is closely connected with
abort_if_missing semantics. Objname has a different semantics (it is not
the exact opposite of the flag) so we do not need to do anything when
the module goes away.

Signed-off-by: Miroslav Benes <mbenes@suse.cz>
Reviewed-by: Petr Mladek <pmladek@suse.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/linux/kgraft.h          |    7 ++-----
 kernel/kgraft.c                 |   12 ++----------
 kernel/kgraft_files.c           |   10 ++++++----
 samples/kgraft/kgraft_patcher.c |    6 +++---
 4 files changed, 13 insertions(+), 22 deletions(-)

--- a/include/linux/kgraft.h
+++ b/include/linux/kgraft.h
@@ -51,7 +51,6 @@ struct kgr_patch_fun {
 	void *new_fun;
 	const char *objname;
 
-	bool abort_if_missing;
 	enum kgr_patch_state {
 		KGR_PATCH_INIT,
 		KGR_PATCH_SLOW,
@@ -99,17 +98,15 @@ struct kgr_patch {
 #define kgr_for_each_patch_fun(p, pf)	\
 	for (pf = p->patches; pf->name; pf++)
 
-#define KGR_PATCH(_name, _new_function, abort)	{			\
+#define KGR_PATCH(_name, _new_function)	{				\
 		.name = #_name,						\
 		.new_fun = _new_function,				\
 		.objname = NULL,					\
-		.abort_if_missing = abort,				\
 	}
-#define KGR_PATCH_OBJ(_name, _new_function, _objname, abort)	{	\
+#define KGR_PATCH_OBJ(_name, _new_function, _objname) {			\
 		.name = #_name,						\
 		.new_fun = _new_function,				\
 		.objname = _objname,					\
-		.abort_if_missing = abort,				\
 	}
 #define KGR_PATCH_END				{ }
 
--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -381,7 +381,7 @@ static unsigned long kgr_get_function_ad
 
 	orig_addr = kallsyms_lookup_name(pf->name);
 	if (!orig_addr) {
-		if (pf->abort_if_missing)
+		if (!pf->objname)
 			pr_err("kgr: function %s not resolved\n", pf->name);
 		return -ENOENT;
 	}
@@ -622,7 +622,7 @@ static int kgr_patch_code(struct kgr_pat
 			return -EINVAL;
 		err = kgr_init_ftrace_ops(patch_fun);
 		if (err) {
-			if (err == -ENOENT && !patch_fun->abort_if_missing) {
+			if (err == -ENOENT && patch_fun->objname) {
 				patch_fun->state = KGR_PATCH_SKIPPED;
 				return 0;
 			}
@@ -1273,14 +1273,6 @@ static void kgr_handle_patch_for_going_m
 		addr = kallsyms_lookup_name(patch_fun->name);
 		if (!within_module(addr, mod))
 			continue;
-		/*
-		 * FIXME: It should schedule the patch removal or block
-		 *	  the module removal or taint kernel or so.
-		 */
-		if (patch_fun->abort_if_missing) {
-			pr_err("kgr: removing function %s that is required for the patch %s\n",
-			       patch_fun->name, patch->name);
-		}
 
 		kgr_forced_code_patch_removal(patch_fun);
 	}
--- a/kernel/kgraft_files.c
+++ b/kernel/kgraft_files.c
@@ -46,14 +46,16 @@ static ssize_t state_show(struct kobject
 	const struct kgr_patch_fun *pf;
 	ssize_t size;
 
-	size = snprintf(buf, PAGE_SIZE, "%-20s   Weak  State\n", "Function");
-
+	size = snprintf(buf, PAGE_SIZE, "%-20s  %-20s  State\n", "Function",
+		"Object");
 
 	kgr_for_each_patch_fun(p, pf) {
 		size += snprintf(buf + size, PAGE_SIZE - size,
-				"%-20s  %5d  %5d\n", pf->name,
-				 !(pf->abort_if_missing), pf->state);
+				"%-20s  %-20s  %5d\n", pf->name,
+				pf->objname ? pf->objname : "vmlinux",
+				pf->state);
 	}
+
 	return size;
 }
 
--- a/samples/kgraft/kgraft_patcher.c
+++ b/samples/kgraft/kgraft_patcher.c
@@ -72,10 +72,10 @@ static struct kgr_patch patch = {
 	.owner = THIS_MODULE,
 	.patches = {
 #if defined(CONFIG_X86)
-		KGR_PATCH(SyS_iopl, kgr_new_sys_iopl, true),
+		KGR_PATCH(SyS_iopl, kgr_new_sys_iopl),
 #endif
-		KGR_PATCH(capable, kgr_new_capable, true),
-		KGR_PATCH(unknown_function, kgr_new_function, false),
+		KGR_PATCH(capable, kgr_new_capable),
+		KGR_PATCH_OBJ(unknown_function, kgr_new_function, "unknown_module"),
 		KGR_PATCH_END
 	}
 };
