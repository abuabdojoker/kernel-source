From: Miroslav Benes <mbenes@suse.cz>
Date: Thu, 17 Mar 2016 14:04:08 +0100
Subject: kgr: add objname to kgr_patch_fun struct
Patch-mainline: not yet, kgraft
References: fate#313296

Currently there is no link between a function supposed to be patched and
the parent object (that is a module or vmlinux) the function is located
in. Unfortunately it proves to be a limitation when ones to implement
some features or optimizations. Simply add an object name to
kgr_patch_fun struct. It is either a module name or NULL for vmlinux
object.

Also leave existing KGR_PATCH macro as is with NULL as a default object
name and add new KGR_PATCH_OBJ macro which allows to specify it.

Signed-off-by: Miroslav Benes <mbenes@suse.cz>
Reviewed-by: Petr Mladek <pmladek@suse.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/linux/kgraft.h |   10 ++++++++++
 1 file changed, 10 insertions(+)

--- a/include/linux/kgraft.h
+++ b/include/linux/kgraft.h
@@ -37,6 +37,8 @@ struct kgr_patch;
  *
  * @name: function to patch
  * @new_fun: function with the new body
+ * @objname: parent object of the function to patch (module name or NULL for
+ *	     vmlinux)
  * @loc_name: cache of @name's fentry
  * @loc_old: cache of the last entry for @name in the patches list
  * @loc_new: cache of @new_name's fentry
@@ -48,6 +50,7 @@ struct kgr_patch_fun {
 
 	const char *name;
 	void *new_fun;
+	const char *objname;
 
 	bool abort_if_missing;
 	enum kgr_patch_state {
@@ -101,6 +104,13 @@ struct kgr_patch {
 #define KGR_PATCH(_name, _new_function, abort)	{			\
 		.name = #_name,						\
 		.new_fun = _new_function,				\
+		.objname = NULL,					\
+		.abort_if_missing = abort,				\
+	}
+#define KGR_PATCH_OBJ(_name, _new_function, _objname, abort)	{	\
+		.name = #_name,						\
+		.new_fun = _new_function,				\
+		.objname = _objname,					\
 		.abort_if_missing = abort,				\
 	}
 #define KGR_PATCH_END				{ }
