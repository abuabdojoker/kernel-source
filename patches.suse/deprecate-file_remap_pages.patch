From: Michal Hocko <mhocko@suse.cz>
Subject: kabi: remove export for generic_file_remap_pages
Patch-mainline: never, emulation is in mmotm
References: fate#317811

This is a first step to deprecate non linear mappings. Upstream is slowly
moving from VM_NONLINEAR to an emulation API and we would like to catch users
as soon as possible and also drop a lot of code which is around non linear
mappings.

The current transition steps:
1) rename remap_pages callback and move it into kABI invisible area.
2) do not export generic_file_remap_pages which is a default implementation
   and replace it by generic_file_remap_pages2 which is used by in-tree users
   for now until we merge the emulation code [1]
3) dump a warning with trace once when remap_file_pages syscall is called

Out-of-tree modules which implement .remap_pages callback should move to
__deprecated_remap_pages symbol. If their implementation is generic_file_remap_pages
then they are safe to use generic_file_remap_pages2 now and this will also safely
move them to the new remap_file_pages implementation. Those users who implement
the callback in any special way should contact us via bugzilla.novell.com and
we should discuss what are the potential drawbacks and whether a new implementation
suits their needs.

Future transition steps if users can live with the emulated implementation:
4) replace remap_file_pages implementation by the emulation [1]
5) WARN_ON(vma->vm_ops->__deprecated_remap_pages != generic_file_remap_pages2)
   but use it anyway.
   Ignore the callback otherwise because the default implementation should be safely
   replaced by emulation
6) make generic_file_remap_pages2 BUG() unconditionally

[1] - http://marc.info/?l=linux-mm&m=139955291601966&w=2
Signed-off-by: Michal Hocko <mhocko@suse.cz>

---
 fs/9p/vfs_file.c   |    2 +-
 fs/btrfs/file.c    |    2 +-
 fs/ceph/addr.c     |    2 +-
 fs/cifs/file.c     |    2 +-
 fs/ext4/file.c     |    2 +-
 fs/f2fs/file.c     |    2 +-
 fs/fuse/file.c     |    2 +-
 fs/gfs2/file.c     |    2 +-
 fs/nfs/file.c      |    2 +-
 fs/nilfs2/file.c   |    2 +-
 fs/ocfs2/mmap.c    |    2 +-
 fs/ubifs/file.c    |    2 +-
 fs/xfs/xfs_file.c  |    2 +-
 include/linux/fs.h |    2 +-
 include/linux/mm.h |   11 ++++++++++-
 mm/filemap.c       |    2 +-
 mm/fremap.c        |   11 +++++++----
 mm/nommu.c         |    4 ++--
 mm/shmem.c         |    2 +-
 19 files changed, 35 insertions(+), 23 deletions(-)

--- a/fs/9p/vfs_file.c
+++ b/fs/9p/vfs_file.c
@@ -735,7 +735,7 @@ v9fs_cached_file_write(struct file *filp
 static const struct vm_operations_struct v9fs_file_vm_ops = {
 	.fault = filemap_fault,
 	.page_mkwrite = v9fs_vm_page_mkwrite,
-	.remap_pages = generic_file_remap_pages,
+	.__deprecated_remap_pages = generic_file_remap_pages2,
 };
 
 
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -2125,7 +2125,7 @@ out:
 static const struct vm_operations_struct btrfs_file_vm_ops = {
 	.fault		= filemap_fault,
 	.page_mkwrite	= btrfs_page_mkwrite,
-	.remap_pages	= generic_file_remap_pages,
+	.__deprecated_remap_pages	= generic_file_remap_pages2,
 };
 
 static int btrfs_file_mmap(struct file	*filp, struct vm_area_struct *vma)
--- a/fs/ceph/addr.c
+++ b/fs/ceph/addr.c
@@ -1607,7 +1607,7 @@ out:
 static struct vm_operations_struct ceph_vmops = {
 	.fault		= ceph_filemap_fault,
 	.page_mkwrite	= ceph_page_mkwrite,
-	.remap_pages	= generic_file_remap_pages,
+	.__deprecated_remap_pages	= generic_file_remap_pages2,
 };
 
 int ceph_mmap(struct file *file, struct vm_area_struct *vma)
--- a/fs/cifs/file.c
+++ b/fs/cifs/file.c
@@ -3133,7 +3133,7 @@ cifs_page_mkwrite(struct vm_area_struct
 static struct vm_operations_struct cifs_file_vm_ops = {
 	.fault = filemap_fault,
 	.page_mkwrite = cifs_page_mkwrite,
-	.remap_pages = generic_file_remap_pages,
+	.__deprecated_remap_pages = generic_file_remap_pages2,
 };
 
 int cifs_file_strict_mmap(struct file *file, struct vm_area_struct *vma)
--- a/fs/ext4/file.c
+++ b/fs/ext4/file.c
@@ -201,7 +201,7 @@ ext4_file_write(struct kiocb *iocb, cons
 static const struct vm_operations_struct ext4_file_vm_ops = {
 	.fault		= ext4_filemap_fault,
 	.page_mkwrite   = ext4_page_mkwrite,
-	.remap_pages	= generic_file_remap_pages,
+	.__deprecated_remap_pages	= generic_file_remap_pages2,
 };
 
 static int ext4_file_mmap(struct file *file, struct vm_area_struct *vma)
--- a/fs/f2fs/file.c
+++ b/fs/f2fs/file.c
@@ -99,7 +99,7 @@ out:
 static const struct vm_operations_struct f2fs_file_vm_ops = {
 	.fault		= filemap_fault,
 	.page_mkwrite	= f2fs_vm_page_mkwrite,
-	.remap_pages	= generic_file_remap_pages,
+	.__deprecated_remap_pages	= generic_file_remap_pages2,
 };
 
 static int get_parent_ino(struct inode *inode, nid_t *pino)
--- a/fs/fuse/file.c
+++ b/fs/fuse/file.c
@@ -1612,7 +1612,7 @@ static const struct vm_operations_struct
 	.close		= fuse_vma_close,
 	.fault		= filemap_fault,
 	.page_mkwrite	= fuse_page_mkwrite,
-	.remap_pages	= generic_file_remap_pages,
+	.__deprecated_remap_pages	= generic_file_remap_pages2,
 };
 
 static int fuse_file_mmap(struct file *file, struct vm_area_struct *vma)
--- a/fs/gfs2/file.c
+++ b/fs/gfs2/file.c
@@ -493,7 +493,7 @@ out:
 static const struct vm_operations_struct gfs2_vm_ops = {
 	.fault = filemap_fault,
 	.page_mkwrite = gfs2_page_mkwrite,
-	.remap_pages = generic_file_remap_pages,
+	.__deprecated_remap_pages = generic_file_remap_pages2,
 };
 
 /**
--- a/fs/nfs/file.c
+++ b/fs/nfs/file.c
@@ -647,7 +647,7 @@ out:
 static const struct vm_operations_struct nfs_file_vm_ops = {
 	.fault = filemap_fault,
 	.page_mkwrite = nfs_vm_page_mkwrite,
-	.remap_pages = generic_file_remap_pages,
+	.__deprecated_remap_pages = generic_file_remap_pages2,
 };
 
 static int nfs_need_sync_write(struct file *filp, struct inode *inode)
--- a/fs/nilfs2/file.c
+++ b/fs/nilfs2/file.c
@@ -133,7 +133,7 @@ static int nilfs_page_mkwrite(struct vm_
 static const struct vm_operations_struct nilfs_file_vm_ops = {
 	.fault		= filemap_fault,
 	.page_mkwrite	= nilfs_page_mkwrite,
-	.remap_pages	= generic_file_remap_pages,
+	.__deprecated_remap_pages	= generic_file_remap_pages2,
 };
 
 static int nilfs_file_mmap(struct file *file, struct vm_area_struct *vma)
--- a/fs/ocfs2/mmap.c
+++ b/fs/ocfs2/mmap.c
@@ -173,7 +173,7 @@ out:
 static const struct vm_operations_struct ocfs2_file_vm_ops = {
 	.fault		= ocfs2_fault,
 	.page_mkwrite	= ocfs2_page_mkwrite,
-	.remap_pages	= generic_file_remap_pages,
+	.__deprecated_remap_pages	= generic_file_remap_pages2,
 };
 
 int ocfs2_mmap(struct file *file, struct vm_area_struct *vma)
--- a/fs/ubifs/file.c
+++ b/fs/ubifs/file.c
@@ -1538,7 +1538,7 @@ out_unlock:
 static const struct vm_operations_struct ubifs_file_vm_ops = {
 	.fault        = filemap_fault,
 	.page_mkwrite = ubifs_vm_page_mkwrite,
-	.remap_pages = generic_file_remap_pages,
+	.__deprecated_remap_pages = generic_file_remap_pages2,
 };
 
 static int ubifs_file_mmap(struct file *file, struct vm_area_struct *vma)
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@ -1695,7 +1695,7 @@ const struct file_operations xfs_dir_fil
 static const struct vm_operations_struct xfs_file_vm_ops = {
 	.fault		= filemap_fault,
 	.page_mkwrite	= xfs_vm_page_mkwrite,
-	.remap_pages	= generic_file_remap_pages,
+	.__deprecated_remap_pages	= generic_file_remap_pages2,
 };
 
 #ifdef HAVE_DMAPI
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -2496,7 +2496,7 @@ extern int sb_min_blocksize(struct super
 
 extern int generic_file_mmap(struct file *, struct vm_area_struct *);
 extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
-extern int generic_file_remap_pages(struct vm_area_struct *, unsigned long addr,
+extern int generic_file_remap_pages2(struct vm_area_struct *, unsigned long addr,
 		unsigned long size, pgoff_t pgoff);
 extern int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size);
 int generic_write_checks(struct file *file, loff_t *pos, size_t *count, int isblk);
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -250,8 +250,17 @@ struct vm_operations_struct {
 	int (*migrate)(struct vm_area_struct *vma, const nodemask_t *from,
 		const nodemask_t *to, unsigned long flags);
 #endif
+
+	/* !!!!!!KABI WARNING!!!!!!!!!
+	 *
+	 * non-linear mappings will go away and the syscall will be emulated
+	 * by multiple mmaps. So this callback will not be needed in future.
+	 * Please DO NOT USE it in ANY OUT OF TREE code for anything else than
+	 * generic implementation or LET US KNOW why this doesn't suit your
+	 * needs via bugzilla.novell.com.
+	 */
 	/* called by sys_remap_file_pages() to populate non-linear mapping */
-	int (*remap_pages)(struct vm_area_struct *vma, unsigned long addr,
+	int (*__deprecated_remap_pages)(struct vm_area_struct *vma, unsigned long addr,
 			   unsigned long size, pgoff_t pgoff);
 };
 
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -2006,7 +2006,7 @@ EXPORT_SYMBOL(filemap_page_mkwrite);
 const struct vm_operations_struct generic_file_vm_ops = {
 	.fault		= filemap_fault,
 	.page_mkwrite	= filemap_page_mkwrite,
-	.remap_pages	= generic_file_remap_pages,
+	.__deprecated_remap_pages	= generic_file_remap_pages2,
 };
 
 /* This is used for a general mmap of a disk file */
--- a/mm/fremap.c
+++ b/mm/fremap.c
@@ -102,7 +102,7 @@ out:
 	return err;
 }
 
-int generic_file_remap_pages(struct vm_area_struct *vma, unsigned long addr,
+int generic_file_remap_pages2(struct vm_area_struct *vma, unsigned long addr,
 			     unsigned long size, pgoff_t pgoff)
 {
 	struct mm_struct *mm = vma->vm_mm;
@@ -120,7 +120,7 @@ int generic_file_remap_pages(struct vm_a
 
 	return 0;
 }
-EXPORT_SYMBOL(generic_file_remap_pages);
+EXPORT_SYMBOL(generic_file_remap_pages2);
 
 /**
  * sys_remap_file_pages - remap arbitrary pages of an existing VM_SHARED vma
@@ -187,7 +187,7 @@ SYSCALL_DEFINE5(remap_file_pages, unsign
 	if (!vma || !(vma->vm_flags & VM_SHARED))
 		goto out;
 
-	if (!vma->vm_ops || !vma->vm_ops->remap_pages)
+	if (!vma->vm_ops || !vma->vm_ops->__deprecated_remap_pages)
 		goto out;
 
 	if (start < vma->vm_start || start + size > vma->vm_end)
@@ -258,7 +258,10 @@ get_write_lock:
 	}
 
 	mmu_notifier_invalidate_range_start(mm, start, start + size);
-	err = vma->vm_ops->remap_pages(vma, start, size, pgoff);
+	WARN_ONCE(1, "The current implementation of remap_file_pages is deprecated "
+		  "and will be replaced by mmap emulation. "
+		  "Please let us know if this might be problem at bugzilla.novell.com.\n");
+	err = vma->vm_ops->__deprecated_remap_pages(vma, start, size, pgoff);
 	mmu_notifier_invalidate_range_end(mm, start, start + size);
 
 	/*
--- a/mm/nommu.c
+++ b/mm/nommu.c
@@ -1992,13 +1992,13 @@ int filemap_fault(struct vm_area_struct
 }
 EXPORT_SYMBOL(filemap_fault);
 
-int generic_file_remap_pages(struct vm_area_struct *vma, unsigned long addr,
+int generic_file_remap_pages2(struct vm_area_struct *vma, unsigned long addr,
 			     unsigned long size, pgoff_t pgoff)
 {
 	BUG();
 	return 0;
 }
-EXPORT_SYMBOL(generic_file_remap_pages);
+EXPORT_SYMBOL(generic_file_remap_pages2);
 
 static int __access_remote_vm(struct task_struct *tsk, struct mm_struct *mm,
 		unsigned long addr, void *buf, int len, int write)
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -2915,7 +2915,7 @@ static const struct vm_operations_struct
 	.set_policy     = shmem_set_policy,
 	.get_policy     = shmem_get_policy,
 #endif
-	.remap_pages	= generic_file_remap_pages,
+	.__deprecated_remap_pages	= generic_file_remap_pages2,
 };
 
 static struct dentry *shmem_mount(struct file_system_type *fs_type,
