From 531ca3a2c0312745e0d812854bd295ec6cff4161 Mon Sep 17 00:00:00 2001
From: Yuyang Du <yuyang.du@intel.com>
Date: Wed, 1 Jun 2016 11:41:04 +0800
Subject: [PATCH 3/5] sched/fair: Skip detach sched avgs for new task when
 changing task groups
Patch-mainline: Not yet, pending v5 submission
References: bsc#983250

Newly forked task has not been enqueued, so should not be removed from
cfs_rq. To do so, we need to pass the fork information all the way
from sched_move_task() to task_move_group_fair().

Signed-off-by: Yuyang Du <yuyang.du@intel.com>
Signed-off-by: Matt Fleming <mfleming@suse.de>
---
 kernel/sched/auto_group.c | 2 +-
 kernel/sched/core.c       | 8 ++++----
 kernel/sched/fair.c       | 8 ++++++--
 kernel/sched/sched.h      | 4 ++--
 4 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/kernel/sched/auto_group.c b/kernel/sched/auto_group.c
index a5d966c..15f2eb7 100644
--- a/kernel/sched/auto_group.c
+++ b/kernel/sched/auto_group.c
@@ -143,7 +143,7 @@ autogroup_move_group(struct task_struct *p, struct autogroup *ag)
 		goto out;
 
 	for_each_thread(p, t)
-		sched_move_task(t);
+		sched_move_task(t, false);
 out:
 	unlock_task_sighand(p, &flags);
 	autogroup_kref_put(prev);
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index afa1455..b47f2e1 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -8044,7 +8044,7 @@ void sched_offline_group(struct task_group *tg)
  *	by now. This function just updates tsk->se.cfs_rq and tsk->se.parent to
  *	reflect its new group.
  */
-void sched_move_task(struct task_struct *tsk)
+void sched_move_task(struct task_struct *tsk, bool fork)
 {
 	struct task_group *tg;
 	int queued, running;
@@ -8073,7 +8073,7 @@ void sched_move_task(struct task_struct *tsk)
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
 	if (tsk->sched_class->task_move_group)
-		tsk->sched_class->task_move_group(tsk);
+		tsk->sched_class->task_move_group(tsk, fork);
 	else
 #endif
 		set_task_rq(tsk, task_cpu(tsk));
@@ -8506,7 +8506,7 @@ static void cpu_cgroup_css_free(struct cgroup_subsys_state *css)
 
 static void cpu_cgroup_fork(struct task_struct *task, void *private)
 {
-	sched_move_task(task);
+	sched_move_task(task, true);
 }
 
 static int cpu_cgroup_can_attach(struct cgroup_taskset *tset)
@@ -8533,7 +8533,7 @@ static void cpu_cgroup_attach(struct cgroup_taskset *tset)
 	struct cgroup_subsys_state *css;
 
 	cgroup_taskset_for_each(task, css, tset)
-		sched_move_task(task);
+		sched_move_task(task, false);
 }
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index f31b8f9..f508c8c 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -8261,9 +8261,13 @@ void init_cfs_rq(struct cfs_rq *cfs_rq)
 }
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
-static void task_move_group_fair(struct task_struct *p)
+static void task_move_group_fair(struct task_struct *p, bool fork)
 {
-	detach_task_cfs_rq(p);
+	/*
+	 * Newly forked task should not be removed from any cfs_rq
+	 */
+	if (!fork)
+		detach_task_cfs_rq(p);
 	set_task_rq(p, task_cpu(p));
 	attach_task_cfs_rq(p);
 	/*
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 2fb94c6..b652963 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -336,7 +336,7 @@ extern void sched_online_group(struct task_group *tg,
 extern void sched_destroy_group(struct task_group *tg);
 extern void sched_offline_group(struct task_group *tg);
 
-extern void sched_move_task(struct task_struct *tsk);
+extern void sched_move_task(struct task_struct *tsk, bool fork);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
 extern int sched_group_set_shares(struct task_group *tg, unsigned long shares);
@@ -1203,7 +1203,7 @@ struct sched_class {
 	void (*update_curr) (struct rq *rq);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
-	void (*task_move_group) (struct task_struct *p);
+	void (*task_move_group) (struct task_struct *p, bool fork);
 #endif
 };
 
-- 
2.7.3

