From: Miroslav Benes <mbenes@suse.cz>
Date: Thu, 17 Mar 2016 14:04:11 +0100
Subject: kgr: fix subtle race with kgr_module_init(), going notifier and
 kgr_modify_kernel()
Patch-mainline: not yet, kgraft
References: fate#313296

This is a modified backport of upstream commit 8cb2c2dc4727 ("livepatch:
Fix subtle race with coming and going modules"). Quoting Petr:

"There is a notifier that handles live patches for coming and going
modules. It takes klp_mutex lock to avoid races with coming and going
patches but it does not keep the lock all the time. Therefore the
following races are possible:

      1. The notifier is called sometime in STATE_MODULE_COMING. The
module is visible by find_module() in this state all the time. It means
that new patch can be registered and enabled even before the notifier is
called. It might create wrong order of stacked patches, see below for an
example.

       2. New patch could still see the module in the GOING state even
after the notifier has been called. It will try to initialize the
related object structures but the module could disappear at any time.
There will stay mess in the structures. It might even cause an invalid
memory access.

    This patch solves the problem by adding a boolean variable into
struct module.  The value is true after the coming and before the going
handler is called.  New patches need to be applied when the value is
true and they need to ignore the module when the value is false."

The same applies also to kGraft although we do not have a coming
notifier. It is replaced with kgr_module_init() function called directly
from load_module(). Thanks to a different implementation the race as
described in point 1 above is in fact harmless. The race could lead to
a double patching of a function but there is a check for
KGR_PATCH_SKIPPED state in kgr_module_init() which prevents. However
we're gonna remove the check so the consequences might be more serious.
The second race is valid nevertheless.

Originally-by: Petr Mladek <pmladek@suse.cz>
Signed-off-by: Miroslav Benes <mbenes@suse.cz>
Reviewed-by: Petr Mladek <pmladek@suse.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/linux/kgraft.h |    2 +-
 include/linux/module.h |    4 ++++
 kernel/kgraft.c        |   27 +++++++++++++++++++++------
 3 files changed, 26 insertions(+), 7 deletions(-)

--- a/include/linux/kgraft.h
+++ b/include/linux/kgraft.h
@@ -120,7 +120,7 @@ extern void kgr_patch_remove(struct kgr_
 
 extern void kgr_unmark_processes(void);
 extern int kgr_modify_kernel(struct kgr_patch *patch, bool revert);
-extern int kgr_module_init(const struct module *mod);
+extern int kgr_module_init(struct module *mod);
 extern int kgr_patch_dir_add(struct kgr_patch *patch);
 extern void kgr_patch_dir_del(struct kgr_patch *patch);
 extern int kgr_add_files(void);
--- a/include/linux/module.h
+++ b/include/linux/module.h
@@ -375,6 +375,10 @@ struct module
 	unsigned long *ftrace_callsites;
 #endif
 
+#ifdef CONFIG_KGRAFT
+	bool kgr_alive;
+#endif
+
 #ifdef CONFIG_MODULE_UNLOAD
 	/* What modules depend on me? */
 	struct list_head source_list;
--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -33,7 +33,7 @@
 static int kgr_patch_code(struct kgr_patch_fun *patch_fun, bool final,
 		bool revert, bool replace_revert);
 static void kgr_work_fn(struct work_struct *work);
-static void __kgr_handle_going_module(const struct module *mod);
+static void __kgr_handle_going_module(struct module *mod);
 
 static struct workqueue_struct *kgr_wq;
 static DECLARE_DELAYED_WORK(kgr_work, kgr_work_fn);
@@ -383,7 +383,10 @@ static bool kgr_is_object_loaded(const c
 	mod = find_module(objname);
 	mutex_unlock(&module_mutex);
 
-	return !!mod;
+	/*
+	 * Do not mess with a work of kgr_module_init() and a going notifier.
+	 */
+	return (mod && mod->kgr_alive);
 }
 
 static unsigned long kgr_get_fentry_loc(const struct kgr_patch_fun *pf)
@@ -1204,7 +1207,7 @@ static int kgr_handle_patch_for_loaded_m
  * It must be called when symbols are visible to kallsyms but before the module
  * init is called. Otherwise, it would not be able to use the fast stub.
  */
-int kgr_module_init(const struct module *mod)
+int kgr_module_init(struct module *mod)
 {
 	struct kgr_patch *p;
 	int ret;
@@ -1216,6 +1219,12 @@ int kgr_module_init(const struct module
 	mutex_lock(&kgr_in_progress_lock);
 
 	/*
+	 * Each module has to know that kgr_module_init() has been called.
+	 * We never know which module will get patched by a new patch.
+	 */
+	mod->kgr_alive = true;
+
+	/*
 	 * Check already applied patches for skipped functions. If there are
 	 * more patches we want to set them all. They need to be in place when
 	 * we remove some patch.
@@ -1325,10 +1334,16 @@ static void kgr_handle_patch_for_going_m
  *
  * In case of any error we BUG in the process.
  */
-static void __kgr_handle_going_module(const struct module *mod)
+static void __kgr_handle_going_module(struct module *mod)
 {
 	struct kgr_patch *p;
 
+	/*
+	 * Each module has to know that a going notifier has been called.
+	 * We never know which module will get patched by a new patch.
+	 */
+	mod->kgr_alive = false;
+
 	list_for_each_entry(p, &kgr_patches, list)
 		kgr_handle_patch_for_going_module(p, mod);
 
@@ -1337,7 +1352,7 @@ static void __kgr_handle_going_module(co
 		kgr_handle_patch_for_going_module(kgr_patch, mod);
 }
 
-static void kgr_handle_going_module(const struct module *mod)
+static void kgr_handle_going_module(struct module *mod)
 {
 	/* Nope when kGraft has not been initialized yet */
 	if (!kgr_initialized)
@@ -1351,7 +1366,7 @@ static void kgr_handle_going_module(cons
 static int kgr_module_notify_exit(struct notifier_block *self,
 				  unsigned long val, void *data)
 {
-	const struct module *mod = data;
+	struct module *mod = data;
 
 	if (val == MODULE_STATE_GOING)
 		kgr_handle_going_module(mod);
