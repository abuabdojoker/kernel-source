From: Miroslav Benes <mbenes@suse.cz>
Date: Thu, 17 Mar 2016 14:04:15 +0100
Subject: kgr: add sympos as disambiguator field to kgr_patch_fun structure
Patch-mainline: not yet, kgraft
References: fate#313296

Currently, it is not possible to patch functions with ambiguous names.
kallsyms_lookup_name() always returns only the first function address it
finds. There is of course a workaround to patch all its calling
functions but this can get ugly easily. We can use symbol's occurrence
in kallsyms table to disambiguate between them.

To quote Chris:
"In cases of duplicate symbols, sympos will be used to disambiguate. By
default sympos will be 0, and patching will only succeed if the symbol
is unique. Specifying a positive value will ensure that occurrence of
the symbol in kallsyms for the patched object will be used for patching
if it is valid."

Moreover, introduce a new macro which allow to specify sympos.

Originally-by: Seth Jennings <sjenning@redhat.com>
Originally-by: Chris J Arges <chris.j.arges@canonical.com>
Signed-off-by: Miroslav Benes <mbenes@suse.cz>
Reviewed-by: Petr Mladek <pmladek@suse.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/linux/kgraft.h |   17 ++++++++++
 kernel/kgraft.c        |   78 ++++++++++++++++++++++++++++++++++++++++++-------
 2 files changed, 84 insertions(+), 11 deletions(-)

--- a/include/linux/kgraft.h
+++ b/include/linux/kgraft.h
@@ -41,6 +41,7 @@ struct kgr_patch;
  *	     vmlinux)
  * @loc_name: cache of @name's function address
  * @loc_old: cache of the last function address  for @name in the patches list
+ * @sympos: symbol position in an object (module or vmlinux) (optional)
  * @ftrace_ops_slow: ftrace ops for slow (temporary) stub
  * @ftrace_ops_fast: ftrace ops for fast () stub
  */
@@ -64,6 +65,14 @@ struct kgr_patch_fun {
 
 	unsigned long loc_name;
 	unsigned long loc_old;
+	/*
+	 * The sympos field is optional and can be used to resolve duplicate
+	 * symbol names in objects (a module or vmlinux). If this field is zero,
+	 * it is expected the symbol is unique, otherwise patching fails. If
+	 * this value is greater than zero then that occurrence of the symbol in
+	 * kallsyms for the given object is used.
+	 */
+	unsigned long sympos;
 
 	struct ftrace_ops ftrace_ops_slow;
 	struct ftrace_ops ftrace_ops_fast;
@@ -102,11 +111,19 @@ struct kgr_patch {
 		.name = #_name,						\
 		.new_fun = _new_function,				\
 		.objname = NULL,					\
+		.sympos = 0,						\
 	}
 #define KGR_PATCH_OBJ(_name, _new_function, _objname) {			\
 		.name = #_name,						\
 		.new_fun = _new_function,				\
 		.objname = _objname,					\
+		.sympos = 0,						\
+	}
+#define KGR_PATCH_OBJPOS(_name, _new_function, _objname, _sympos) {	\
+		.name = #_name,						\
+		.new_fun = _new_function,				\
+		.objname = _objname,					\
+		.sympos = _sympos,					\
 	}
 #define KGR_PATCH_END				{ }
 
--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -392,7 +392,10 @@ static bool kgr_is_object_loaded(const c
 
 struct kgr_find_args {
 	const char *name;
+	const char *objname;
 	unsigned long addr;
+	unsigned long count;
+	unsigned long sympos;
 };
 
 static int kgr_find_callback(void *data, const char *name, struct module *mod,
@@ -400,25 +403,60 @@ static int kgr_find_callback(void *data,
 {
 	struct kgr_find_args *args = data;
 
+	if ((mod && !args->objname) || (!mod && args->objname))
+		return 0;
+
 	if (strcmp(args->name, name))
 		return 0;
 
+	if (args->objname && strcmp(args->objname, mod->name))
+		return 0;
+
 	args->addr = addr;
-	return 1;
+	args->count++;
+
+	/*
+	 * Finish the search when the symbol is found for the desired position
+	 * or the position is not defined for a non-unique symbol.
+	 */
+	if ((args->sympos && (args->count == args->sympos)) ||
+	    (!args->sympos && (args->count > 1)))
+		return 1;
+
+	return 0;
 }
 
 static unsigned long kgr_kallsyms_lookup(const struct kgr_patch_fun *pf)
 {
 	struct kgr_find_args args = {
 		.name = pf->name,
+		.objname = pf->objname,
 		.addr = 0,
+		.count = 0,
+		.sympos = pf->sympos,
 	};
 
 	mutex_lock(&module_mutex);
 	kallsyms_on_each_symbol(kgr_find_callback, &args);
 	mutex_unlock(&module_mutex);
 
-	return args.addr;
+	/*
+	 * Ensure an address was found. If sympos is 0, ensure symbol is unique;
+	 * otherwise ensure the symbol position count matches sympos.
+	 */
+	if (args.addr == 0)
+		pr_err("kgr: function %s not resolved\n", pf->name);
+	else if (pf->sympos == 0 && args.count > 1)
+		pr_err("kgr: unresolvable ambiguity for function %s in object %s\n",
+			pf->name, pf->objname ? pf->objname : "vmlinux");
+	else if (pf->sympos > 0 && pf->sympos != args.count)
+		pr_err("kgr: position %lu for function %s in object %s not found\n",
+			pf->sympos, pf->name,
+			pf->objname ? pf->objname : "vmlinux");
+	else
+		return args.addr;
+
+	return 0;
 }
 
 static unsigned long kgr_get_function_address(const struct kgr_patch_fun *pf)
@@ -428,10 +466,8 @@ static unsigned long kgr_get_function_ad
 	char check_buf[KSYM_SYMBOL_LEN];
 
 	orig_addr = kgr_kallsyms_lookup(pf);
-	if (!orig_addr) {
-		pr_err("kgr: function %s not resolved\n", pf->name);
+	if (!orig_addr)
 		return -ENOENT;
-	}
 
 	check_name = kallsyms_lookup(orig_addr, NULL, NULL, NULL, check_buf);
 	if (strcmp(check_name, pf->name)) {
@@ -506,6 +542,17 @@ enum kgr_find_type {
 	KGR_LAST_TYPE
 };
 
+static bool kgr_are_objnames_equal(const char *objname1, const char *objname2)
+{
+	if (!objname1 && !objname2)
+		return true;
+
+	if (!objname1 || !objname2)
+		return false;
+
+	return !strcmp(objname1, objname2);
+}
+
 /*
  * This function takes information about the patched function from the given
  * struct kgr_patch_fun and tries to find the requested variant of the
@@ -516,6 +563,8 @@ kgr_get_patch_fun(const struct kgr_patch
 		  enum kgr_find_type type)
 {
 	const char *name = patch_fun->name;
+	const char *objname = patch_fun->objname;
+	unsigned long sympos = patch_fun->sympos;
 	struct kgr_patch_fun *pf, *found_pf = NULL;
 	struct kgr_patch *p;
 
@@ -526,7 +575,9 @@ kgr_get_patch_fun(const struct kgr_patch
 
 	if (kgr_patch && (type == KGR_IN_PROGRESS || type == KGR_LAST_EXISTING))
 		kgr_for_each_patch_fun(kgr_patch, pf)
-			if (!strcmp(pf->name, name))
+			if (!strcmp(pf->name, name) &&
+			    kgr_are_objnames_equal(pf->objname, objname) &&
+			    pf->sympos == sympos)
 				return pf;
 
 	if (type == KGR_IN_PROGRESS)
@@ -537,7 +588,9 @@ kgr_get_patch_fun(const struct kgr_patch
 			if (type == KGR_PREVIOUS && pf == patch_fun)
 				goto out;
 
-			if (!strcmp(pf->name, name))
+			if (!strcmp(pf->name, name) &&
+			    kgr_are_objnames_equal(pf->objname, objname) &&
+			    pf->sympos == sympos)
 				found_pf = pf;
 		}
 	}
@@ -878,12 +931,15 @@ static void kgr_patching_failed(struct k
 	WARN(1, "kgr: patching failed. Previous state was recovered.\n");
 }
 
-static bool kgr_patch_contains(const struct kgr_patch *p, const char *name)
+static bool kgr_patch_contains(const struct kgr_patch *p,
+	const struct kgr_patch_fun *patch_fun)
 {
 	const struct kgr_patch_fun *pf;
 
 	kgr_for_each_patch_fun(p, pf)
-		if (!strcmp(pf->name, name))
+		if (!strcmp(pf->name, patch_fun->name) &&
+		    kgr_are_objnames_equal(pf->objname, patch_fun->objname) &&
+		    pf->sympos == patch_fun->sympos)
 			return true;
 
 	return false;
@@ -903,7 +959,7 @@ static int kgr_revert_replaced_funs(stru
 
 	list_for_each_entry(p, &kgr_patches, list)
 		kgr_for_each_patch_fun(p, pf)
-			if (!kgr_patch_contains(patch, pf->name)) {
+			if (!kgr_patch_contains(patch, pf)) {
 				/*
 				 * Calls from new universe to all functions
 				 * being reverted are redirected to loc_old in
@@ -1125,7 +1181,7 @@ static int kgr_patch_code_delayed(struct
 		new_ops = &patch_fun->ftrace_ops_slow;
 	} else {
 		if (kgr_patch && kgr_patch->replace_all && !kgr_revert &&
-		    !kgr_patch_contains(kgr_patch, patch_fun->name)) {
+		    !kgr_patch_contains(kgr_patch, patch_fun)) {
 			next_state = KGR_PATCH_REVERT_SLOW;
 			patch_fun->loc_old = patch_fun->loc_name;
 			/*
