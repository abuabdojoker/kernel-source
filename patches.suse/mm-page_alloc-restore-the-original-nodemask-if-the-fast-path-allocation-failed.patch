From 200ba6399eac4e91e5ec09b10e40cdaa389dab19 Mon Sep 17 00:00:00 2001
From: Mel Gorman <mgorman@suse.de>
Date: Thu, 5 May 2016 09:52:39 +0100
Subject: [PATCH] mm, page_alloc: restore the original nodemask if the fast
 path allocation failed

References: bnc#971975 VM performance -- page allocator
Patch-mainline: v4.7
Git-commit: 4741526b83c5d3a3d661d1896f9e7414c5730bcb

The page allocator fast path uses either the requested nodemask or
cpuset_current_mems_allowed if cpusets are enabled.  If the allocation
context allows watermarks to be ignored then it can also ignore memory
policies.  However, on entering the allocator slowpath the nodemask may
still be cpuset_current_mems_allowed and the policies are enforced.  This
patch resets the nodemask appropriately before entering the slowpath.

Link: http://lkml.kernel.org/r/20160504143628.GU2858@techsingularity.net
Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
Signed-off-by: Mel Gorman <mgorman@suse.de>
Cc: Jesper Dangaard Brouer <brouer@redhat.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 mm/page_alloc.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 9822b3efcae1..bd46558fb962 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -3592,6 +3592,12 @@ __alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,
 	alloc_mask = memalloc_noio_flags(gfp_mask);
 	ac.spread_dirty_pages = false;
 
+	/*
+	 * Restore the original nodemask if it was potentially replaced with
+	 * &cpuset_current_mems_allowed to optimize the fast-path attempt.
+	 */
+	if (cpusets_enabled())
+		ac.nodemask = nodemask;
 	page = __alloc_pages_slowpath(alloc_mask, order, &ac);
 
 no_zone:
