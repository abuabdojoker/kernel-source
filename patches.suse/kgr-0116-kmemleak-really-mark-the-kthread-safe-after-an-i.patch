From: Petr Mladek <pmladek@suse.com>
Date: Fri, 4 Mar 2016 14:10:59 +0100
Subject: kgr: kmemleak, really mark the kthread safe after an interrupt
Patch-mainline: not yet, kgraft
References: fate#313296

kmemleak kthread could block kGraft patch finalization for few
minutes.  The problem is that it goes into the interruptible sleep
repeatedly until the entire original timeout is reached. We mark the
thread as safe outside this cycle.

This patch moves kgr_task_safe(t) into the wait cycle, so that it is
marked safe after the first interrupt.

Signed-off-by: Petr Mladek <pmladek@suse.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 mm/kmemleak.c |    6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

--- a/mm/kmemleak.c
+++ b/mm/kmemleak.c
@@ -1410,15 +1410,15 @@ static int kmemleak_scan_thread(void *ar
 	while (!kthread_should_stop()) {
 		signed long timeout = jiffies_scan_wait;
 
-		kgr_task_safe(current);
-
 		mutex_lock(&scan_mutex);
 		kmemleak_scan();
 		mutex_unlock(&scan_mutex);
 
 		/* wait before the next scan */
-		while (timeout && !kthread_should_stop())
+		while (timeout && !kthread_should_stop()) {
 			timeout = schedule_timeout_interruptible(timeout);
+			kgr_task_safe(current);
+		}
 	}
 
 	pr_info("Automatic memory scanning thread ended\n");
