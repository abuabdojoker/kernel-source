From: Ilya Dryomov <idryomov@gmail.com>
Date: Mon, 22 Jun 2015 13:24:48 +0300
Subject: [PATCH] rbd: store rbd_options in rbd_device
Git-commit: d147543d7943eaa549a569143b7815482585fb91
Patch-mainline: v4.2
References: Fate#318586


Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
Reviewed-by: Alex Elder <elder@linaro.org>
Acked-by: NeilBrown <neilb@suse.com>

---
 drivers/block/rbd.c         |   17 ++++++++++-------
 include/linux/ceph/librbd.h |    1 +
 2 files changed, 11 insertions(+), 7 deletions(-)

--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@ -4400,7 +4400,8 @@ static void rbd_spec_free(struct kref *k
 }
 
 static struct rbd_device *rbd_dev_create(struct rbd_client *rbdc,
-				struct rbd_spec *spec)
+					 struct rbd_spec *spec,
+					 struct rbd_options *opts)
 {
 	struct rbd_device *rbd_dev;
 
@@ -4416,8 +4417,9 @@ static struct rbd_device *rbd_dev_create
 	INIT_LIST_HEAD(&rbd_dev->node);
 	init_rwsem(&rbd_dev->header_rwsem);
 
-	rbd_dev->spec = spec;
 	rbd_dev->rbd_client = rbdc;
+	rbd_dev->spec = spec;
+	rbd_dev->opts = opts;
 
 	/* Initialize the layout used for all rbd requests */
 
@@ -4433,6 +4435,7 @@ static void rbd_dev_destroy(struct rbd_d
 {
 	rbd_put_client(rbd_dev->rbd_client);
 	rbd_spec_put(rbd_dev->spec);
+	kfree(rbd_dev->opts);
 	kfree(rbd_dev);
 }
 
@@ -5690,7 +5693,7 @@ static int rbd_dev_probe_parent(struct r
 		goto out_err;
 	}
 
-	parent = rbd_dev_create(rbd_dev->rbd_client, rbd_dev->parent_spec);
+	parent = rbd_dev_create(rbd_dev->rbd_client, rbd_dev->parent_spec, NULL);
 	if (!parent) {
 		ret = -ENOMEM;
 		goto out_err;
@@ -5940,9 +5943,6 @@ static ssize_t do_rbd_add(struct bus_typ
 	rc = rbd_add_parse_args(buf, &ceph_opts, &rbd_opts, &spec);
 	if (rc < 0)
 		goto err_out_module;
-	read_only = rbd_opts->read_only;
-	kfree(rbd_opts);
-	rbd_opts = NULL;	/* done with this */
 
 	rbdc = rbd_get_client(ceph_opts);
 	if (IS_ERR(rbdc)) {
@@ -5968,11 +5968,12 @@ static ssize_t do_rbd_add(struct bus_typ
 		goto err_out_client;
 	}
 
-	rbd_dev = rbd_dev_create(rbdc, spec);
+	rbd_dev = rbd_dev_create(rbdc, spec, rbd_opts);
 	if (!rbd_dev)
 		goto err_out_client;
 	rbdc = NULL;		/* rbd_dev now owns this */
 	spec = NULL;		/* rbd_dev now owns this */
+	rbd_opts = NULL;	/* rbd_dev now owns this */
 
 	rc = rbd_dev_image_probe(rbd_dev, 0);
 	if (rc < 0)
@@ -5980,6 +5981,7 @@ static ssize_t do_rbd_add(struct bus_typ
 
 	/* If we are mapping a snapshot it must be marked read-only */
 
+	read_only = rbd_dev->opts->read_only;
 	if (rbd_dev->spec->snap_id != CEPH_NOSNAP)
 		read_only = true;
 	rbd_dev->mapping.read_only = read_only;
@@ -6004,6 +6006,7 @@ err_out_client:
 	rbd_put_client(rbdc);
 err_out_args:
 	rbd_spec_put(spec);
+	kfree(rbd_opts);
 err_out_module:
 	module_put(THIS_MODULE);
 
--- a/include/linux/ceph/librbd.h
+++ b/include/linux/ceph/librbd.h
@@ -126,6 +126,7 @@ struct rbd_device {
 	struct rbd_image_header	header;
 	unsigned long		flags;		/* possibly lock protected */
 	struct rbd_spec		*spec;
+	struct rbd_options	*opts;
 
 	char			*header_name;
 
