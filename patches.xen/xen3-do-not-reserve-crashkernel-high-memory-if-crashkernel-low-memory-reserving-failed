From: Baoquan He <bhe@redhat.com>
Date: Sun, 19 Jul 2015 22:53:20 +0800
Subject: Do not reserve crashkernel high memory if crashkernel low memory
 reserving failed
Git-commit: no
Patch-mainline: no
References: bsc#939145

People reported that when allocating crashkernel memory using
",high" and ",low" syntax, there were cases where the reservation
of the "high" portion succeeds, but the reservation of the "low"
portion fails. Then kexec can load kdump kernel successfully, but
the boot of kdump kernel fails as there's no low memory. This is
because allocation of low memory for kdump kernel can fail on large
systems for reasons. E.g it could be manually specified crashkernel
low memory is too large to find in memblock region.

In this patch add return value for reserve_crashkernel_low. Then put
the crashkernel low memory reserving earlier, just between finding
the crashkernel high memory region and reserving crashkernel high
memory. Then if crashkernel low memory reserving failed we do not
reserve crashkernel high memory but return immediately. Users can
take measures when they found kdump kernel cann't be loaded
successfully.

Signed-off-by: Baoquan He <bhe@redhat.com>
Acked-by: Joerg Roedel <jroedel@suse.de>
Automatically created from "patches.fixes/do-not-reserve-crashkernel-high-memory-if-crashkernel-low-memory-reserving-failed" by xen-port-patches.py

--- a/arch/x86/kernel/setup-xen.c
+++ b/arch/x86/kernel/setup-xen.c
@@ -584,7 +584,7 @@ static void __init memblock_x86_reserve_
 # define CRASH_KERNEL_ADDR_HIGH_MAX	MAXMEM
 #endif
 
-static void __init reserve_crashkernel_low(void)
+static int __init reserve_crashkernel_low(void)
 {
 #ifdef CONFIG_X86_64
 	const unsigned long long alignment = 16<<20;	/* 16M */
@@ -614,7 +614,7 @@ static void __init reserve_crashkernel_l
 	} else {
 		/* passed with crashkernel=0,low ? */
 		if (!low_size)
-			return;
+			return 0;
 	}
 
 	low_base = memblock_find_in_range(low_size, (1ULL<<32),
@@ -624,7 +624,7 @@ static void __init reserve_crashkernel_l
 		if (!auto_set)
 			pr_info("crashkernel low reservation failed - No suitable area found.\n");
 
-		return;
+		return -EINVAL;
 	}
 
 	memblock_reserve(low_base, low_size);
@@ -636,6 +636,7 @@ static void __init reserve_crashkernel_l
 	crashk_low_res.end   = low_base + low_size - 1;
 	insert_resource(&iomem_resource, &crashk_low_res);
 #endif
+	return 0;
 }
 
 static void __init reserve_crashkernel(void)
@@ -685,6 +686,10 @@ static void __init reserve_crashkernel(v
 			return;
 		}
 	}
+
+	if (crash_base >= (1ULL<<32) && reserve_crashkernel_low())
+		return;
+
 	memblock_reserve(crash_base, crash_size);
 
 	printk(KERN_INFO "Reserving %ldMB of memory at %ldMB "
@@ -696,9 +701,6 @@ static void __init reserve_crashkernel(v
 	crashk_res.start = crash_base;
 	crashk_res.end   = crash_base + crash_size - 1;
 	insert_resource(&iomem_resource, &crashk_res);
-
-	if (crash_base >= (1ULL<<32))
-		reserve_crashkernel_low();
 }
 #else
 static void __init reserve_crashkernel(void)
