From: jbeulich@suse.com
Subject: don't automatically reboot Dom0 on panic (match native)
Patch-mainline: Never, SUSE-Xen specific

But make sure KEXEC_CMD_kexec gets issued instead of the previous
reporting of SHUTDOWN_crash.

TBD: kexec_should_crash() should probably also be made functional
     for the CONFIG_XEN && !CONFIG_KEXEC case

---
 arch/x86/kernel/setup-xen.c |   14 ++++++++------
 include/linux/kexec.h       |   14 +++++++++++++-
 kernel/kexec.c              |    6 ++++++
 3 files changed, 27 insertions(+), 7 deletions(-)

--- a/arch/x86/kernel/setup-xen.c
+++ b/arch/x86/kernel/setup-xen.c
@@ -950,15 +950,17 @@ void __init setup_arch(char **cmdline_p)
 	unsigned long p2m_pages;
 	struct physdev_set_iopl set_iopl;
 
+	if (!is_initial_xendomain()) {
 #ifdef CONFIG_X86_32
-	/* Force a quick death if the kernel panics (not domain 0). */
-	extern int panic_timeout;
-	if (!panic_timeout && !is_initial_xendomain())
-		panic_timeout = 1;
+		/* Force a quick death if the kernel panics (not domain 0). */
+		extern int panic_timeout;
+		if (!panic_timeout)
+			panic_timeout = 1;
 #endif
 
-	/* Register a call for panic conditions. */
-	atomic_notifier_chain_register(&panic_notifier_list, &xen_panic_block);
+		/* Register a call for panic conditions. */
+		atomic_notifier_chain_register(&panic_notifier_list, &xen_panic_block);
+	}
 
 	set_iopl.iopl = 1;
 	WARN_ON(HYPERVISOR_physdev_op(PHYSDEVOP_set_iopl, &set_iopl));
--- a/include/linux/kexec.h
+++ b/include/linux/kexec.h
@@ -2,6 +2,10 @@
 #define LINUX_KEXEC_H
 
 #include <uapi/linux/kexec.h>
+#ifdef CONFIG_XEN
+#include <asm/hypervisor.h>
+#include <xen/interface/kexec.h>
+#endif
 
 #if defined(CONFIG_KEXEC) || defined(CONFIG_XEN_PRIVILEGED_GUEST)
 
@@ -353,7 +357,15 @@ void crash_free_reserved_phys_range(unsi
 struct pt_regs;
 struct task_struct;
 static inline void __crash_kexec(struct pt_regs *regs) { }
-static inline void crash_kexec(struct pt_regs *regs) { }
+static inline void crash_kexec(struct pt_regs *regs) {
+#ifdef CONFIG_XEN
+	if (is_initial_xendomain()) {
+		xen_kexec_exec_t xke = { .type = KEXEC_TYPE_CRASH };
+
+		VOID(HYPERVISOR_kexec_op(KEXEC_CMD_kexec, &xke));
+	}
+#endif
+}
 static inline int kexec_should_crash(struct task_struct *p) { return 0; }
 #define kexec_in_progress false
 #endif /* CONFIG_KEXEC */
--- a/kernel/kexec.c
+++ b/kernel/kexec.c
@@ -1464,6 +1464,12 @@ void __crash_kexec(struct pt_regs *regs)
 			crash_save_vmcoreinfo();
 			machine_crash_shutdown(&fixed_regs);
 			machine_kexec(kexec_crash_image);
+#ifdef CONFIG_XEN
+		} else if (is_initial_xendomain()) {
+			xen_kexec_exec_t xke = { .type = KEXEC_TYPE_CRASH };
+
+			VOID(HYPERVISOR_kexec_op(KEXEC_CMD_kexec, &xke));
+#endif
 		}
 		mutex_unlock(&kexec_mutex);
 	}
