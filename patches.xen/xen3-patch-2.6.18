From: www.kernel.org
Subject: Linux 2.6.18
Patch-mainline: Never, SUSE-Xen specific

Automatically created from "patches.kernel.org/patch-2.6.18" by xen-port-patches.py
Acked-by: jbeulich@novell.com

2.6.35/kernel/time.c change removed (no longer applicable)

--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -1834,7 +1834,7 @@ config KEXEC_JUMP
 	  code in physical address mode via KEXEC
 
 config PHYSICAL_START
-	hex "Physical address where the kernel is loaded" if (EXPERT || CRASH_DUMP)
+	hex "Physical address where the kernel is loaded" if (EXPERT || CRASH_DUMP || XEN)
 	default "0x1000000"
 	---help---
 	  This gives the physical address where the kernel is loaded.
--- a/arch/x86/kernel/quirks.c
+++ b/arch/x86/kernel/quirks.c
@@ -6,7 +6,7 @@
 
 #include <asm/hpet.h>
 
-#if defined(CONFIG_X86_IO_APIC) && defined(CONFIG_SMP) && defined(CONFIG_PCI)
+#if defined(CONFIG_X86_IO_APIC) && (defined(CONFIG_SMP) || defined(CONFIG_XEN)) && defined(CONFIG_PCI)
 
 static void quirk_intel_irqbalance(struct pci_dev *dev)
 {
@@ -34,10 +34,21 @@ static void quirk_intel_irqbalance(struc
 	if (!(word & (1 << 13))) {
 		dev_info(&dev->dev, "Intel E7520/7320/7525 detected; "
 			"disabling irq balancing and affinity\n");
+#ifndef CONFIG_XEN
 		noirqdebug_setup("");
 #ifdef CONFIG_PROC_FS
 		no_irq_affinity = 1;
 #endif
+#else
+		{
+			struct xen_platform_op op = {
+				.cmd = XENPF_platform_quirk,
+				.u.platform_quirk.quirk_id = QUIRK_NOIRQBALANCING
+			};
+
+			WARN_ON(HYPERVISOR_platform_op(&op));
+		}
+#endif
 	}
 
 	/* put back the original value for config space*/
--- a/arch/x86/kernel/time-xen.c
+++ b/arch/x86/kernel/time-xen.c
@@ -80,6 +80,8 @@ DEFINE_SPINLOCK(i8253_lock);
 EXPORT_SYMBOL(i8253_lock);
 #endif
 
+#define XEN_SHIFT 22
+
 int pit_latch_buggy;              /* extern */
 
 #if defined(__x86_64__)
@@ -225,6 +227,7 @@ static u64 get_nsec_offset(struct shadow
 	return scale_delta(delta, shadow->tsc_to_nsec_mul, shadow->tsc_shift);
 }
 
+#ifdef CONFIG_X86_64
 static unsigned long get_usec_offset(struct shadow_time_info *shadow)
 {
 	u64 now, delta;
@@ -232,6 +235,7 @@ static unsigned long get_usec_offset(str
 	delta = now - shadow->tsc_timestamp;
 	return scale_delta(delta, shadow->tsc_to_usec_mul, shadow->tsc_shift);
 }
+#endif
 
 static void __update_wallclock(time_t sec, long nsec)
 {
@@ -348,6 +352,8 @@ void rtc_cmos_write(unsigned char val, u
 }
 EXPORT_SYMBOL(rtc_cmos_write);
 
+#ifdef CONFIG_X86_64
+
 static struct {
 	spinlock_t lock;
 	struct timeval tv;
@@ -441,16 +447,25 @@ static inline void monotonic_reset(void)
 }
 
 int do_settimeofday(struct timespec *tv)
+#elif defined(CONFIG_XEN_PRIVILEGED_GUEST)
+int xen_update_wallclock(const struct timespec *tv)
+#endif
+#if defined(CONFIG_X86_64) || defined(CONFIG_XEN_PRIVILEGED_GUEST)
 {
 	time_t sec;
 	s64 nsec;
 	unsigned int cpu;
 	struct shadow_time_info *shadow;
 	struct xen_platform_op op;
+#ifdef CONFIG_X86_64
+	int warp = 0;
 
 	if (unlikely(!tv)) {
 		monotonic_reset();
-		return 0;
+		if (!is_initial_xendomain() || independent_wallclock)
+			return 0;
+		tv = &xtime;
+		warp = 1;
 	}
 
 	if ((unsigned long)tv->tv_nsec >= NSEC_PER_SEC)
@@ -458,11 +473,18 @@ int do_settimeofday(struct timespec *tv)
 
 	if (!is_initial_xendomain() && !independent_wallclock)
 		return -EPERM;
+#else
+	if (!is_initial_xendomain() || independent_wallclock)
+		return -EPERM;
+#endif
 
 	cpu = get_cpu();
 	shadow = &per_cpu(shadow_time, cpu);
 
-	write_seqlock_irq(&xtime_lock);
+#ifdef CONFIG_X86_64
+	if (!warp)
+		write_seqlock_irq(&xtime_lock);
+#endif
 
 	/*
 	 * Ensure we don't get blocked for a long time so that our time delta
@@ -485,24 +507,37 @@ int do_settimeofday(struct timespec *tv)
 		op.u.settime.system_time = shadow->system_timestamp;
 		WARN_ON(HYPERVISOR_platform_op(&op));
 		update_wallclock();
+#ifdef CONFIG_X86_64
+		if (warp) {
+			put_cpu();
+			return 0;
+		}
+#endif
 	} else if (independent_wallclock) {
 		nsec -= shadow->system_timestamp;
 		__normalize_time(&sec, &nsec);
 		__update_wallclock(sec, nsec);
 	}
+#ifdef CONFIG_X86_64
 	ntp_clear();
 
 	monotonic_reset();
 
 	write_sequnlock_irq(&xtime_lock);
+#endif
 
 	put_cpu();
 
+#ifdef CONFIG_X86_64
 	clock_was_set();
+#endif
 	return 0;
 }
+#endif
 
+#ifdef CONFIG_X86_64
 EXPORT_SYMBOL(do_settimeofday);
+#endif
 
 static void sync_xen_wallclock(unsigned long dummy);
 static DEFINE_TIMER(sync_xen_wallclock_timer, sync_xen_wallclock, 0, 0);
@@ -777,6 +812,68 @@ void mark_tsc_unstable(void)
 }
 EXPORT_SYMBOL_GPL(mark_tsc_unstable);
 
+#include <linux/clocksource.h>
+
+static cycle_t xen_clocksource_read(void)
+{
+#ifdef CONFIG_SMP
+	static cycle_t last_ret;
+#ifndef CONFIG_64BIT
+	cycle_t last = cmpxchg64(&last_ret, 0, 0);
+#else
+	cycle_t last = last_ret;
+#define cmpxchg64 cmpxchg
+#endif
+	cycle_t ret = sched_clock();
+
+	if (unlikely((s64)(ret - last) < 0)) {
+		if (last - ret > permitted_clock_jitter
+		    && printk_ratelimit()) {
+			unsigned int cpu = get_cpu();
+			struct shadow_time_info *shadow = &per_cpu(shadow_time, cpu);
+
+			printk(KERN_WARNING "clocksource/%u: "
+			       "Time went backwards: "
+			       "ret=%Lx delta=%Ld shadow=%Lx offset=%Lx\n",
+			       cpu, ret, ret - last, shadow->system_timestamp,
+			       get_nsec_offset(shadow));
+			put_cpu();
+		}
+		return last;
+	}
+
+	for (;;) {
+		cycle_t cur = cmpxchg64(&last_ret, last, ret);
+
+		if (cur == last || (s64)(ret - cur) < 0)
+			return ret;
+		last = cur;
+	}
+#else
+	return sched_clock();
+#endif
+}
+
+static struct clocksource clocksource_xen = {
+	.name			= "xen",
+	.rating			= 400,
+	.read			= xen_clocksource_read,
+	.mask			= CLOCKSOURCE_MASK(64),
+	.mult			= 1 << XEN_SHIFT,		/* time directly in nanoseconds */
+	.shift			= XEN_SHIFT,
+	.is_continuous		= 1,
+};
+
+static int __init init_xen_clocksource(void)
+{
+	clocksource_xen.mult = clocksource_khz2mult(cpu_khz,
+						clocksource_xen.shift);
+
+	return clocksource_register(&clocksource_xen);
+}
+
+module_init(init_xen_clocksource);
+
 #endif
 
 static void init_missing_ticks_accounting(unsigned int cpu)
--- a/arch/x86/pci/irq.c
+++ b/arch/x86/pci/irq.c
@@ -95,13 +95,18 @@ static struct irq_routing_table * __init
 	u8 *addr;
 	struct irq_routing_table *rt;
 
+#ifdef CONFIG_XEN
+	if (!is_initial_xendomain())
+		return NULL;
+#endif
 	if (pirq_table_addr) {
-		rt = pirq_check_routing_table((u8 *) __va(pirq_table_addr));
+		rt = pirq_check_routing_table((u8 *) isa_bus_to_virt(pirq_table_addr));
 		if (rt)
 			return rt;
 		printk(KERN_WARNING "PCI: PIRQ table NOT found at pirqaddr\n");
 	}
-	for (addr = (u8 *) __va(0xf0000); addr < (u8 *) __va(0x100000); addr += 16) {
+	for (addr = (u8 *) isa_bus_to_virt(0xf0000);
+	     addr < (u8 *) isa_bus_to_virt(0x100000); addr += 16) {
 		rt = pirq_check_routing_table(addr);
 		if (rt)
 			return rt;
--- a/drivers/acpi/processor_perflib.c
+++ b/drivers/acpi/processor_perflib.c
@@ -610,6 +610,8 @@ end:
 	return result;
 }
 
+#ifndef CONFIG_PROCESSOR_EXTERNAL_CONTROL
+
 int acpi_processor_preregister_performance(
 		struct acpi_processor_performance __percpu *performance)
 {
@@ -823,3 +825,5 @@ acpi_processor_unregister_performance(st
 }
 
 EXPORT_SYMBOL(acpi_processor_unregister_performance);
+
+#endif /* !CONFIG_PROCESSOR_EXTERNAL_CONTROL */
--- /dev/null
+++ b/arch/x86/include/mach-xen/asm/time.h
@@ -0,0 +1,6 @@
+#ifdef CONFIG_XEN_PRIVILEGED_GUEST
+struct timespec;
+int xen_update_wallclock(const struct timespec *);
+#endif
+
+#include_next <asm/time.h>
--- a/arch/x86/include/asm/thread_info.h
+++ b/arch/x86/include/asm/thread_info.h
@@ -162,11 +162,15 @@ struct thread_info {
 	 _TIF_USER_RETURN_NOTIFY | _TIF_UPROBE)
 
 /* flags to check in __switch_to() */
+#ifndef CONFIG_XEN
 #define _TIF_WORK_CTXSW							\
 	(_TIF_IO_BITMAP|_TIF_NOTSC|_TIF_BLOCKSTEP)
 
 #define _TIF_WORK_CTXSW_PREV (_TIF_WORK_CTXSW|_TIF_USER_RETURN_NOTIFY)
 #define _TIF_WORK_CTXSW_NEXT (_TIF_WORK_CTXSW)
+#else
+#define _TIF_WORK_CTXSW _TIF_DEBUG
+#endif
 
 #define STACK_WARN		(THREAD_SIZE/8)
 
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -23,6 +23,9 @@
 #include <linux/stop_machine.h>
 #include <linux/pvclock_gtod.h>
 #include <linux/compiler.h>
+#ifdef CONFIG_XEN_PRIVILEGED_GUEST
+#include <asm/time.h>
+#endif
 
 #include "tick-internal.h"
 #include "ntp_internal.h"
@@ -929,6 +932,10 @@ int do_settimeofday64(const struct times
 
 	timekeeping_update(tk, TK_CLEAR_NTP | TK_MIRROR | TK_CLOCK_WAS_SET);
 
+#ifdef CONFIG_XEN_PRIVILEGED_GUEST
+	xen_update_wallclock(tv);
+#endif
+
 	write_seqcount_end(&tk_core.seq);
 	raw_spin_unlock_irqrestore(&timekeeper_lock, flags);
 
