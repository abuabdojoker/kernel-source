From: Jiang, Yunhong <yunhong.jiang@intel.com>	
Subject: xen/acpi: Export host physical CPU information to dom0
Patch-mainline: Never, SUSE-Xen specific
References: bnc#651066

This patch expose host's physical CPU information to dom0 in sysfs, so
that dom0's management tools can control the physical CPU if needed.

It also provides interface in sysfs to logical online/offline a
physical CPU.

Notice: The information in dom0 is synced with xen hypervisor
asynchronously.

From: Jiang, Yunhong <yunhong.jiang@intel.com>	
Subject: Add cpu hotplug support for 2.6.32 branch

Add physical CPU hotplug support to origin/xen/next-2.6.32 branch.
Please notice that, even with this change, the acpi_processor->id is 
still always -1. This is because several workaround in PM side depends
on acpi_processor->id == -1. As the CPU hotplug logic does not depends
on acpi_processor->id, I'd still keep it no changes.

But we need change the acpi_processor->id in the future.

Signed-off-by: Jiang, Yunhong <yunhong.jiang@intel.com>

jb: ported over glue logic; retry loops around XENPF_get_cpuinfo;
    improve error handling; cleanup.
Acked-by: jbeulich@novell.com

--- a/arch/x86/kernel/acpi/processor_extcntl_xen.c
+++ b/arch/x86/kernel/acpi/processor_extcntl_xen.c
@@ -181,9 +181,65 @@ static int xen_tx_notifier(struct acpi_p
 {
 	return -EINVAL;
 }
+
 static int xen_hotplug_notifier(struct acpi_processor *pr, int event)
 {
-	return -EINVAL;
+	int ret = -EINVAL;
+#ifdef CONFIG_ACPI_HOTPLUG_CPU
+	acpi_status status = 0;
+	acpi_object_type type;
+	uint32_t apic_id;
+	int device_decl = 0;
+	unsigned long long pxm;
+	xen_platform_op_t op;
+
+	status = acpi_get_type(pr->handle, &type);
+	if (ACPI_FAILURE(status)) {
+		pr_warn("can't get object type for acpi_id %#x\n",
+			pr->acpi_id);
+		return -ENXIO;
+	}
+
+	switch (type) {
+	case ACPI_TYPE_PROCESSOR:
+		break;
+	case ACPI_TYPE_DEVICE:
+		device_decl = 1;
+		break;
+	default:
+		pr_warn("unsupported object type %#x for acpi_id %#x\n",
+			type, pr->acpi_id);
+		return -EOPNOTSUPP;
+	}
+
+	apic_id = acpi_get_cpuid(pr->handle, ~device_decl, pr->acpi_id);
+	if (apic_id == -1) {
+		pr_warn("can't get apic_id for acpi_id %#x\n", pr->acpi_id);
+		return -ENODATA;
+	}
+
+	status = acpi_evaluate_integer(pr->handle, "_PXM", NULL, &pxm);
+	if (ACPI_FAILURE(status)) {
+		pr_warn("can't get pxm for acpi_id %#x\n", pr->acpi_id);
+		return -ENODATA;
+	}
+
+	switch (event) {
+	case HOTPLUG_TYPE_ADD:
+		op.cmd = XENPF_cpu_hotadd;
+		op.u.cpu_add.apic_id = apic_id;
+		op.u.cpu_add.acpi_id = pr->acpi_id;
+		op.u.cpu_add.pxm = pxm;
+		ret = HYPERVISOR_platform_op(&op);
+		break;
+	case HOTPLUG_TYPE_REMOVE:
+		pr_warn("Xen doesn't support CPU hot remove\n");
+		ret = -EOPNOTSUPP;
+		break;
+	}
+#endif
+
+	return ret;
 }
 
 static struct processor_extcntl_ops xen_extcntl_ops = {
@@ -235,8 +291,10 @@ static int __init init_extcntl(void)
 	acpi_os_set_prepare_extended_sleep(xen_extended_sleep);
 	acpi_suspend_lowlevel = xen_acpi_suspend_lowlevel;
 
+#ifndef CONFIG_ACPI_HOTPLUG_CPU
 	if (!pmbits)
 		return 0;
+#endif
 	if (pmbits & XEN_PROCESSOR_PM_CX)
 		xen_extcntl_ops.pm_ops[PM_TYPE_IDLE] = xen_cx_notifier;
 	if (pmbits & XEN_PROCESSOR_PM_PX)
--- a/drivers/acpi/acpi_processor.c
+++ b/drivers/acpi/acpi_processor.c
@@ -174,10 +174,21 @@ static int acpi_processor_hotadd_init(st
 	acpi_status status;
 	int ret;
 
+#ifdef CONFIG_XEN
+	if (xen_pcpu_index(pr->acpi_id, 1) != -1)
+		return AE_OK;
+#endif
+
 	status = acpi_evaluate_integer(pr->handle, "_STA", NULL, &sta);
 	if (ACPI_FAILURE(status) || !(sta & ACPI_STA_DEVICE_PRESENT))
 		return -ENODEV;
 
+	if (processor_cntl_external()) {
+		processor_notify_external(pr, PROCESSOR_HOTPLUG,
+					  HOTPLUG_TYPE_ADD);
+		return 0;
+	}
+
 	cpu_maps_update_begin();
 	cpu_hotplug_begin();
 
@@ -436,10 +447,6 @@ static int acpi_processor_add(struct acp
 		goto err;
 	}
 
-	if (processor_cntl_external())
-		processor_notify_external(pr, PROCESSOR_HOTPLUG,
-					  HOTPLUG_TYPE_ADD);
-
 	/*
 	 * processor_device_array is not cleared on errors to allow buggy BIOS
 	 * checks.
@@ -452,6 +459,10 @@ static int acpi_processor_add(struct acp
 	per_cpu(processors, pr->id) = pr;
 
 	dev = get_cpu_device(pr->id);
+#ifdef CONFIG_XEN
+	} else
+		dev = get_pcpu_device(pr->acpi_id);
+#endif
 	if (!dev) {
 		result = -ENODEV;
 		goto err;
@@ -469,9 +480,6 @@ static int acpi_processor_add(struct acp
 
 	dev_err(dev, "Processor driver could not be attached\n");
 	acpi_unbind_one(dev);
-#ifdef CONFIG_XEN
-	}
-#endif
 
  err:
 	free_cpumask_var(pr->throttling.shared_cpu_map);
--- a/drivers/acpi/processor_core.c
+++ b/drivers/acpi/processor_core.c
@@ -44,10 +44,13 @@ int processor_notify_external(struct acp
 
 		ret = processor_extcntl_ops->pm_ops[type](pr, event);
 		break;
+#ifdef CONFIG_ACPI_HOTPLUG_CPU
 	case PROCESSOR_HOTPLUG:
 		if (processor_extcntl_ops->hotplug)
 			ret = processor_extcntl_ops->hotplug(pr, type);
+		xen_pcpu_hotplug(type);
 		break;
+#endif
 	default:
 		pr_err("Unsupported processor event %d.\n", event);
 		break;
--- a/drivers/acpi/processor_driver.c
+++ b/drivers/acpi/processor_driver.c
@@ -72,6 +72,16 @@ static struct device_driver acpi_process
 	.remove = acpi_processor_stop,
 };
 
+#ifdef CONFIG_XEN
+static struct device_driver acpi_xen_processor_driver = {
+	.name = "xen-processor",
+	.bus = &xen_pcpu_subsys,
+	.acpi_match_table = processor_device_ids,
+	.probe = acpi_processor_start,
+	.remove = acpi_processor_stop,
+};
+#endif
+
 static void acpi_processor_notify(acpi_handle handle, u32 event, void *data)
 {
 	struct acpi_device *device = data;
@@ -288,6 +298,14 @@ static int __init acpi_processor_driver_
 	if (acpi_disabled)
 		return 0;
 
+#ifdef CONFIG_XEN
+	result = driver_register(&acpi_xen_processor_driver);
+	if (result < 0) {
+		pr_warn("Xen processor driver not registered (%d)\n", result);
+		acpi_xen_processor_driver.acpi_match_table = NULL;
+	}
+#endif
+
 	result = driver_register(&acpi_processor_driver);
 	if (result < 0)
 		return result;
@@ -310,6 +328,10 @@ static void __exit acpi_processor_driver
 	unregister_hotcpu_notifier(&acpi_cpu_notifier);
 	acpi_processor_syscore_exit();
 	driver_unregister(&acpi_processor_driver);
+#ifdef CONFIG_XEN
+	if (acpi_xen_processor_driver.acpi_match_table)
+		driver_unregister(&acpi_xen_processor_driver);
+#endif
 }
 
 module_init(acpi_processor_driver_init);
--- a/drivers/xen/core/Makefile
+++ b/drivers/xen/core/Makefile
@@ -5,6 +5,7 @@
 obj-y := evtchn.o gnttab.o reboot.o machine_reboot.o
 
 obj-$(CONFIG_XEN_PRIVILEGED_GUEST) += firmware.o
+obj-$(CONFIG_ACPI_HOTPLUG_CPU)	+= pcpu.o
 obj-$(CONFIG_PROC_FS)		+= xen_proc.o
 obj-$(CONFIG_HOTPLUG_CPU)	+= cpu_hotplug.o
 obj-$(CONFIG_XEN_SMPBOOT)	+= smpboot.o
--- /dev/null
+++ b/drivers/xen/core/pcpu.c
@@ -0,0 +1,431 @@
+/*
+ * pcpu.c - management physical cpu in dom0 environment
+ */
+#include <linux/acpi.h>
+#include <linux/cpu.h>
+#include <linux/err.h>
+#include <linux/export.h>
+#include <linux/interrupt.h>
+#include <linux/kobject.h>
+#include <linux/list.h>
+#include <linux/spinlock.h>
+#include <asm/hypervisor.h>
+#include <xen/interface/platform.h>
+#include <xen/evtchn.h>
+#include <acpi/processor.h>
+
+struct pcpu {
+	struct list_head list;
+	struct device dev;
+	uint32_t apic_id;
+	uint32_t acpi_id;
+	uint32_t flags;
+};
+
+static inline int xen_pcpu_online(uint32_t flags)
+{
+	return !!(flags & XEN_PCPU_FLAGS_ONLINE);
+}
+
+static DEFINE_MUTEX(xen_pcpu_lock);
+
+/* No need for irq disable since hotplug notify is in workqueue context */
+#define get_pcpu_lock() mutex_lock(&xen_pcpu_lock);
+#define put_pcpu_lock() mutex_unlock(&xen_pcpu_lock);
+
+static LIST_HEAD(xen_pcpus);
+static LIST_HEAD(orphan_pcpus);
+
+static int xen_pcpu_down(uint32_t xen_id)
+{
+	xen_platform_op_t op;
+
+	op.cmd = XENPF_cpu_offline;
+	op.u.cpu_ol.cpuid = xen_id;
+	return HYPERVISOR_platform_op(&op);
+}
+
+static int xen_pcpu_up(uint32_t xen_id)
+{
+	xen_platform_op_t op;
+
+	op.cmd = XENPF_cpu_online;
+	op.u.cpu_ol.cpuid = xen_id;
+	return HYPERVISOR_platform_op(&op);
+}
+
+static ssize_t show_online(struct device *dev,
+			   struct device_attribute *attr,
+			   char *buf)
+{
+	struct pcpu *cpu = container_of(dev, struct pcpu, dev);
+
+	return sprintf(buf, "%d\n", xen_pcpu_online(cpu->flags));
+}
+
+static ssize_t store_online(struct device *dev,
+			    struct device_attribute *attr,
+			    const char *buf, size_t count)
+{
+	ssize_t ret;
+
+	if (!count)
+		return -EINVAL;
+
+	switch (buf[0]) {
+	case '0':
+		ret = xen_pcpu_down(dev->id);
+		break;
+	case '1':
+		ret = xen_pcpu_up(dev->id);
+		break;
+	default:
+		ret = -EINVAL;
+	}
+
+	if (ret >= 0)
+		ret = count;
+	return ret;
+}
+
+static DEVICE_ATTR(online, 0644, show_online, store_online);
+
+static ssize_t show_apicid(struct device *dev,
+			   struct device_attribute *attr,
+			   char *buf)
+{
+	struct pcpu *cpu = container_of(dev, struct pcpu, dev);
+
+	return sprintf(buf, "%#x\n", cpu->apic_id);
+}
+static DEVICE_ATTR(apic_id, 0444, show_apicid, NULL);
+
+static ssize_t show_acpiid(struct device *dev,
+			   struct device_attribute *attr,
+			   char *buf)
+{
+	struct pcpu *cpu = container_of(dev, struct pcpu, dev);
+
+	return sprintf(buf, "%#x\n", cpu->acpi_id);
+}
+static DEVICE_ATTR(acpi_id, 0444, show_acpiid, NULL);
+
+struct bus_type xen_pcpu_subsys = {
+	.name = "xen_pcpu",
+	.dev_name = "xen_pcpu",
+};
+EXPORT_SYMBOL_GPL(xen_pcpu_subsys);
+
+static int xen_pcpu_remove(struct pcpu *pcpu)
+{
+	device_remove_file(&pcpu->dev, &dev_attr_online);
+	device_remove_file(&pcpu->dev, &dev_attr_apic_id);
+	device_remove_file(&pcpu->dev, &dev_attr_acpi_id);
+	device_unregister(&pcpu->dev);
+	list_del(&pcpu->list);
+
+	return 0;
+}
+
+static inline int same_pcpu(struct xenpf_pcpuinfo *info,
+			    struct pcpu *pcpu)
+{
+	return (pcpu->apic_id == info->apic_id) &&
+		(pcpu->dev.id == info->xen_cpuid);
+}
+
+/*
+ * Return 1 if online status changed
+ */
+static int xen_pcpu_online_check(struct xenpf_pcpuinfo *info,
+				 struct pcpu *pcpu)
+{
+	int result = 0;
+
+	if (info->xen_cpuid != pcpu->dev.id)
+		return 0;
+
+	if (xen_pcpu_online(info->flags) && !xen_pcpu_online(pcpu->flags)) {
+		/* the pcpu is onlined */
+		pcpu->flags |= XEN_PCPU_FLAGS_ONLINE;
+		kobject_uevent(&pcpu->dev.kobj, KOBJ_ONLINE);
+		result = 1;
+	} else if (!xen_pcpu_online(info->flags) &&
+		   xen_pcpu_online(pcpu->flags))  {
+		/* The pcpu is offlined now */
+		pcpu->flags &= ~XEN_PCPU_FLAGS_ONLINE;
+		kobject_uevent(&pcpu->dev.kobj, KOBJ_OFFLINE);
+		result = 1;
+	}
+
+	return result;
+}
+
+static int pcpu_dev_init(struct pcpu *cpu)
+{
+	int err = device_register(&cpu->dev);
+
+	if (!err) {
+		device_create_file(&cpu->dev, &dev_attr_online);
+		device_create_file(&cpu->dev, &dev_attr_apic_id);
+		device_create_file(&cpu->dev, &dev_attr_acpi_id);
+	}
+	return err;
+}
+
+static struct pcpu *get_pcpu(unsigned int xen_id)
+{
+	struct pcpu *pcpu;
+
+	list_for_each_entry(pcpu, &xen_pcpus, list)
+		if (pcpu->dev.id == xen_id)
+			return pcpu;
+
+	return NULL;
+}
+
+#ifdef CONFIG_ACPI
+struct device *get_pcpu_device(unsigned int acpi_id)
+{
+	struct pcpu *pcpu;
+	struct device *dev = NULL;
+
+	get_pcpu_lock();
+	list_for_each_entry(pcpu, &xen_pcpus, list)
+		if (pcpu->acpi_id == acpi_id) {
+			dev = &pcpu->dev;
+			break;
+		}
+	put_pcpu_lock();
+
+	return dev;
+}
+#endif
+
+static struct pcpu *init_pcpu(struct xenpf_pcpuinfo *info)
+{
+	struct pcpu *pcpu;
+	int err;
+	bool found = false;
+
+	if (info->flags & XEN_PCPU_FLAGS_INVALID)
+		return ERR_PTR(-EINVAL);
+
+	/* The PCPU is just added */
+	list_for_each_entry(pcpu, &orphan_pcpus, list)
+		if (pcpu->acpi_id == info->acpi_id) {
+			list_del(&pcpu->list);
+			found = true;
+			break;
+		}
+	if (!found)
+		pcpu = kzalloc(sizeof(struct pcpu), GFP_KERNEL);
+	if (!pcpu)
+		return ERR_PTR(-ENOMEM);
+
+	pcpu->apic_id = info->apic_id;
+	pcpu->acpi_id = info->acpi_id;
+	pcpu->flags = info->flags;
+
+	pcpu->dev.bus = &xen_pcpu_subsys;
+	pcpu->dev.id = info->xen_cpuid;
+
+	err = pcpu_dev_init(pcpu);
+	if (err) {
+		if (found)
+			list_add(&pcpu->list, &orphan_pcpus);
+		else
+			kfree(pcpu);
+		return ERR_PTR(err);
+	}
+
+	list_add_tail(&pcpu->list, &xen_pcpus);
+	return pcpu;
+}
+
+#define PCPU_NO_CHANGE			0
+#define PCPU_ADDED			1
+#define PCPU_ONLINE_OFFLINE		2
+#define PCPU_REMOVED			3
+/*
+ * Caller should hold the pcpu lock
+ * < 0: Something wrong
+ * 0: No changes
+ * > 0: State changed
+ */
+static int _sync_pcpu(unsigned int cpu_num, unsigned int *max_id)
+{
+	struct pcpu *pcpu;
+	struct xenpf_pcpuinfo *info;
+	xen_platform_op_t op;
+	int ret;
+
+	op.cmd = XENPF_get_cpuinfo;
+	info = &op.u.pcpu_info;
+	info->xen_cpuid = cpu_num;
+
+	do {
+		ret = HYPERVISOR_platform_op(&op);
+	} while (ret == -EBUSY);
+	if (ret)
+		return ret;
+
+	if (max_id)
+		*max_id = op.u.pcpu_info.max_present;
+
+	pcpu = get_pcpu(cpu_num);
+
+	if (info->flags & XEN_PCPU_FLAGS_INVALID) {
+		/* The pcpu has been removed */
+		if (pcpu) {
+			xen_pcpu_remove(pcpu);
+			list_add(&pcpu->list, &orphan_pcpus);
+			return PCPU_REMOVED;
+		}
+		return PCPU_NO_CHANGE;
+	}
+
+
+	if (!pcpu) {
+		pcpu = init_pcpu(info);
+		if (!IS_ERR(pcpu))
+			return PCPU_ADDED;
+		pr_warn("Failed to init pCPU %#x (%ld)\n",
+			info->xen_cpuid, PTR_ERR(pcpu));
+		return PTR_ERR(pcpu);
+	}
+
+	if (!same_pcpu(info, pcpu)) {
+		/*
+		 * Old pCPU is replaced by a new one, which means
+		 * several vIRQ-s were missed - can this happen?
+		 */
+		pr_warn("pCPU %#x changed!\n", pcpu->dev.id);
+		pcpu->apic_id = info->apic_id;
+		pcpu->acpi_id = info->acpi_id;
+	}
+	if (xen_pcpu_online_check(info, pcpu))
+		return PCPU_ONLINE_OFFLINE;
+	return PCPU_NO_CHANGE;
+}
+
+/*
+ * Sync dom0's pcpu information with xen hypervisor's
+ */
+static int xen_sync_pcpus(bool init)
+{
+	/*
+	 * Boot cpu always have cpu_id 0 in xen
+	 */
+	unsigned int cpu_num = 0, max_id = 0;
+	int result = 0;
+
+	get_pcpu_lock();
+
+	while ((result >= 0) && (cpu_num <= max_id)) {
+		result = _sync_pcpu(cpu_num, &max_id);
+
+		switch (result)	{
+		case PCPU_NO_CHANGE:
+		case PCPU_ADDED:
+		case PCPU_ONLINE_OFFLINE:
+		case PCPU_REMOVED:
+			break;
+		default:
+			pr_warn("Failed to sync pcpu %#x\n", cpu_num);
+			break;
+		}
+		cpu_num++;
+	}
+
+	if (result < 0 && init) {
+		struct pcpu *pcpu, *tmp;
+
+		list_for_each_entry_safe(pcpu, tmp, &xen_pcpus, list) {
+			xen_pcpu_remove(pcpu);
+			kfree(pcpu);
+		}
+	}
+
+	put_pcpu_lock();
+
+	return result;
+}
+
+static void xen_pcpu_dpc(struct work_struct *work)
+{
+	if (xen_sync_pcpus(false) < 0)
+		pr_warn("xen_pcpu_dpc: Failed to sync pcpu information\n");
+}
+static DECLARE_WORK(xen_pcpu_work, xen_pcpu_dpc);
+
+static irqreturn_t xen_pcpu_interrupt(int irq, void *dev_id)
+{
+	schedule_work(&xen_pcpu_work);
+
+	return IRQ_HANDLED;
+}
+
+int xen_pcpu_hotplug(int type)
+{
+	schedule_work(&xen_pcpu_work);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(xen_pcpu_hotplug);
+
+int xen_pcpu_index(uint32_t id, bool is_acpiid)
+{
+	unsigned int cpu_num, max_id;
+	xen_platform_op_t op;
+	struct xenpf_pcpuinfo *info = &op.u.pcpu_info;
+
+	op.cmd = XENPF_get_cpuinfo;
+	for (max_id = cpu_num = 0; cpu_num <= max_id; ++cpu_num) {
+		int ret;
+
+		info->xen_cpuid = cpu_num;
+		do {
+			ret = HYPERVISOR_platform_op(&op);
+		} while (ret == -EBUSY);
+		if (ret)
+			continue;
+
+		if (info->max_present > max_id)
+			max_id = info->max_present;
+		if (id == (is_acpiid ? info->acpi_id : info->apic_id))
+			return cpu_num;
+	}
+
+	return -1;
+}
+EXPORT_SYMBOL_GPL(xen_pcpu_index);
+
+static int __init xen_pcpu_init(void)
+{
+	int err;
+
+	if (!is_initial_xendomain())
+		return 0;
+
+	xen_pcpu_subsys.match = cpu_subsys.match;
+	err = subsys_system_register(&xen_pcpu_subsys, NULL);
+	if (err) {
+		pr_warn("xen_pcpu_init: "
+			"Failed to register subsys (%d)\n", err);
+		return err;
+	}
+
+	xen_sync_pcpus(true);
+
+	if (!list_empty(&xen_pcpus))
+		err = bind_virq_to_irqhandler(VIRQ_PCPU_STATE, 0,
+					      xen_pcpu_interrupt, 0,
+					      "pcpu", NULL);
+	if (err < 0)
+		pr_warn("xen_pcpu_init: "
+			"Failed to bind virq (%d)\n", err);
+
+	return err;
+}
+arch_initcall(xen_pcpu_init);
--- a/include/acpi/processor.h
+++ b/include/acpi/processor.h
@@ -498,6 +498,8 @@ static inline void xen_convert_psd_pack(
 	xpsd->num_processors = apsd->num_processors;
 }
 
+extern int xen_pcpu_hotplug(int type);
+extern int xen_pcpu_index(uint32_t id, bool is_acpiid);
 #endif /* CONFIG_XEN */
 
 #endif
--- a/include/linux/cpu.h
+++ b/include/linux/cpu.h
@@ -171,6 +171,10 @@ static inline void cpu_maps_update_done(
 
 #endif /* CONFIG_SMP */
 extern struct bus_type cpu_subsys;
+#ifdef CONFIG_XEN
+extern struct bus_type xen_pcpu_subsys;
+struct device *get_pcpu_device(unsigned int acpi_id);
+#endif
 
 #ifdef CONFIG_HOTPLUG_CPU
 /* Stop CPUs going up and down. */
