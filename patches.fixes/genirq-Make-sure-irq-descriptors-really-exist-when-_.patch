From: Joerg Roedel <jroedel@suse.de>
Date: Thu, 1 Oct 2015 19:58:39 +0200
Subject: [PATCH] genirq: Make sure irq descriptors really exist when __irq_alloc_descs returns
Patch-mainline: no, upstream switched to irq-domains
References: bsc#945626

Since the sparse_irq lock was dropped between the allocation
of the irq in the bitmap and allocating its descriptor, it
was possible that __irq_alloc_descs returns with -EBUSY for
interrupts that have no descriptor yet.

This could cause race conditions where code tries to access
the irq descriptor after getting -EBUSY from
__irq_alloc_descs and ends up dereferencing a NULL pointer.

Fix this by holding the lock for the whole allocation time
(irq bitmap and irq descriptor).

Signed-off-by: Joerg Roedel <jroedel@suse.de>
---
 kernel/irq/irqdesc.c | 11 ++---------
 1 file changed, 2 insertions(+), 9 deletions(-)

--- a/kernel/irq/irqdesc.c
+++ b/kernel/irq/irqdesc.c
@@ -183,9 +183,7 @@
 	 * sparse tree we can free it. Access in proc will fail to
 	 * lookup the descriptor.
 	 */
-	mutex_lock(&sparse_irq_lock);
 	delete_irq_desc(irq);
-	mutex_unlock(&sparse_irq_lock);
 
 	free_masks(desc);
 	free_percpu(desc->kstat_irqs);
@@ -202,9 +200,7 @@
 		desc = alloc_desc(start + i, node, owner);
 		if (!desc)
 			goto err;
-		mutex_lock(&sparse_irq_lock);
 		irq_insert_desc(start + i, desc);
-		mutex_unlock(&sparse_irq_lock);
 	}
 	return start;
 
@@ -212,9 +208,7 @@
 	for (i--; i >= 0; i--)
 		free_desc(start + i);
 
-	mutex_lock(&sparse_irq_lock);
 	bitmap_clear(allocated_irqs, start, cnt);
-	mutex_unlock(&sparse_irq_lock);
 	return -ENOMEM;
 }
 
@@ -347,10 +341,10 @@
 	if (from >= nr_irqs || (from + cnt) > nr_irqs)
 		return;
 
+	mutex_lock(&sparse_irq_lock);
 	for (i = 0; i < cnt; i++)
 		free_desc(from + i);
 
-	mutex_lock(&sparse_irq_lock);
 	bitmap_clear(allocated_irqs, from, cnt);
 	mutex_unlock(&sparse_irq_lock);
 }
@@ -396,8 +390,7 @@
 	}
 
 	bitmap_set(allocated_irqs, start, cnt);
-	mutex_unlock(&sparse_irq_lock);
-	return alloc_descs(start, cnt, node, owner);
+	ret = alloc_descs(start, cnt, node, owner);
 
 err:
 	mutex_unlock(&sparse_irq_lock);
