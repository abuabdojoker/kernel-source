From: NeilBrown <neilb@suse.com>
Subject: Make sure XPRT_CONNECTING gets cleared when needed.
Patch-mainline: v4.0
Git-commit: 718ba5b87343df303017585200ee182e937eabfc
References: bsc#946309

(note: change in v4.0 is totally different to this change, it
 involves a significant rewrite of the code)

xs_close() calls cancel_delayed_work_sync() on ->connect_worker.
If the cancel was successful (i.e. the work item was pending), then
XPRT_CONNECTING will have been set, and now will never be cleared.
That causes all future connection attempts to block indefinitely.

So in that case, call xprt_clear_connecting().

This is similar to xs_tcp_cancel_linger_timeout() which calls
xprt_clear_conneting() if cancel_delayed_work() succeeds.

Signed-off-by: NeilBrown <neilb@suse.com>

---
 net/sunrpc/xprtsock.c |    3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@ -836,7 +836,8 @@ static void xs_close(struct rpc_xprt *xp
 
 	dprintk("RPC:       xs_close xprt %p\n", xprt);
 
-	cancel_delayed_work_sync(&transport->connect_worker);
+	if (cancel_delayed_work_sync(&transport->connect_worker))
+		xprt_clear_connecting(xprt);
 
 	xs_reset_transport(transport);
 	xprt->reestablish_timeout = 0;
