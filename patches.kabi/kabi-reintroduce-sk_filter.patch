From: Jiri Slaby <jslaby@suse.cz>
Subject: kABI: reintroduce sk_filter
Patch-mainline: never, kabi
References: kabi

In 3.12.68, commit 9edbcfdced9628dfdc6dc54d625e571aef81a8a5 (tcp: take
care of truncations done by sk_filter()), upstream commit
ac6e780070e30e4c35bd395acfe9191e6268bdd3 made an inline from
sk_filter.

Restore the old function, because it is a part of kABI. The function
is now only a wrapper to sk_filter_trim_cap.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/linux/filter.h |    5 +----
 net/core/filter.c      |    6 ++++++
 2 files changed, 7 insertions(+), 4 deletions(-)

--- a/include/linux/filter.h
+++ b/include/linux/filter.h
@@ -42,10 +42,7 @@ static inline unsigned int sk_filter_siz
 }
 
 int sk_filter_trim_cap(struct sock *sk, struct sk_buff *skb, unsigned int cap);
-static inline int sk_filter(struct sock *sk, struct sk_buff *skb)
-{
-	return sk_filter_trim_cap(sk, skb, 1);
-}
+int sk_filter(struct sock *sk, struct sk_buff *skb);
 extern unsigned int sk_run_filter(const struct sk_buff *skb,
 				  const struct sock_filter *filter);
 extern int sk_unattached_filter_create(struct sk_filter **pfp,
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -108,6 +108,12 @@ int sk_filter_trim_cap(struct sock *sk,
 }
 EXPORT_SYMBOL(sk_filter_trim_cap);
 
+int sk_filter(struct sock *sk, struct sk_buff *skb)
+{
+	return sk_filter_trim_cap(sk, skb, 1);
+}
+EXPORT_SYMBOL(sk_filter);
+
 /**
  *	sk_run_filter - run a filter on a socket
  *	@skb: buffer to run the filter on
