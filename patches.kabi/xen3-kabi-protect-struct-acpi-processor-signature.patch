From: Joerg Roedel <jroedel@suse.de>
Subject: kabi: protect struct acpi_processor signature
Patch-mainline: Never, kabi workaround
References: bsc#959463

For bsc#959463, two commits are backported that break kabi. Commit
ca9f62ac783bf88c54143f8065adc0fc8df859c1 adds the field "apic_id" to struct
acpi_processor, and commit d536bf3dc97417471e2c5098837a1cddd7fbb3c7 changes
the signature of exported function acpi_map_lsapic().

The apic_id field stores the result of acpi_get_apicid(). The modified
acpi_map_lsapic() accepts this field as a new paramter instead of duplicating
the _MAT evaluation.  According to Fujitsu (bsc#959463 comment 14) the
duplicated evaluation is wrong on systems with x2apic strucure and breaks CPU
hot-add (the fact that it fixes a bug wasn't known at the time of the original
commit).

To handle this without breaking KABI, we create a acpi_map_lsapic2() variant
that keeps the new parameter, and use it from the CPU hot-add function
acpi_processor_hotadd_init(). Since we don't have the apic_id field, the
function calls acpi_get_apicid(). For that it has to add a new parameter for
device declaration, but the function is internal.

We restore acpi_map_lsapic() to omit the new parameter, and restore the
duplicated _MAT evaluation code. This is only for compatibility with any
out-of-tree modules that depend on this function (if such exist), and if it
keeps the buggy behavior, it's not a regression.

[vbabka@suse.cz: some tweaks, commit log]
Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
Automatically created from "patches.kabi/kabi-protect-struct-acpi-processor-signature.patch" by xen-port-patches.py

--- a/arch/x86/kernel/acpi/boot.c
+++ b/arch/x86/kernel/acpi/boot.c
@@ -705,6 +705,7 @@ static int _acpi_map_lsapic(acpi_handle
 }
 #else
 #define _acpi_map_lsapic(h, p) (-EINVAL)
+#define _acpi_map_lsapic2(h, i, p) (-EINVAL)
 #endif
 
 int __ref acpi_map_lsapic2(acpi_handle handle, int physid, int *pcpu)
