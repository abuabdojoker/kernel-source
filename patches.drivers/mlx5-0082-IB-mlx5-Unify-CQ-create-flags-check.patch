From: Leon Romanovsky <leonro@mellanox.com>
Date: Tue, 29 Dec 2015 17:01:30 +0200
Subject: IB/mlx5: Unify CQ create flags check
Patch-mainline: v4.5-rc1
Git-commit: 34356f64ac0df2326fa50e2d4bca6f7c03ed16c1
References: bsc#966170 FATE#320225 bsc#966172 FATE#320226

The create_cq() can receive creation flags which were used
differently by two commits which added create_cq extended
command and cross-channel. The merged code caused to not
accept any flags at all.

This patch unifies the check into one function and one return
error code.

Fixes: 972ecb821379 ("IB/mlx5: Add create_cq extended command")
Fixes: 051f263098a9 ("IB/mlx5: Add driver cross-channel support")
Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
Signed-off-by: Doug Ledford <dledford@redhat.com>
Acked-by: Benjamin Poirier <bpoirier@suse.com>
---
 drivers/infiniband/hw/mlx5/cq.c      |    9 +--------
 drivers/infiniband/hw/mlx5/mlx5_ib.h |    3 ++-
 2 files changed, 3 insertions(+), 9 deletions(-)

--- a/drivers/infiniband/hw/mlx5/cq.c
+++ b/drivers/infiniband/hw/mlx5/cq.c
@@ -757,10 +757,6 @@ static void destroy_cq_kernel(struct mlx
 	mlx5_db_free(dev->mdev, &cq->db);
 }
 
-enum {
-	CQ_CREATE_FLAGS_SUPPORTED = IB_CQ_FLAGS_TIMESTAMP_COMPLETION
-};
-
 struct ib_cq *mlx5_ib_create_cq(struct ib_device *ibdev,
 				const struct ib_cq_init_attr *attr,
 				struct ib_ucontext *context,
@@ -778,14 +774,11 @@ struct ib_cq *mlx5_ib_create_cq(struct i
 	int eqn;
 	int err;
 
-	if (check_cq_create_flags(attr->flags))
-		return ERR_PTR(-EINVAL);
-
 	if (entries < 0 ||
 	    (entries > (1 << MLX5_CAP_GEN(dev->mdev, log_max_cq_sz))))
 		return ERR_PTR(-EINVAL);
 
-	if (attr->flags & ~CQ_CREATE_FLAGS_SUPPORTED)
+	if (check_cq_create_flags(attr->flags))
 		return ERR_PTR(-EOPNOTSUPP);
 
 	entries = roundup_pow_of_two(entries + 1);
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@ -770,7 +770,8 @@ static inline u32 check_cq_create_flags(
 	 * It returns non-zero value for unsupported CQ
 	 * create flags, otherwise it returns zero.
 	 */
-	return (flags & ~IB_CQ_FLAGS_IGNORE_OVERRUN);
+	return (flags & ~(IB_CQ_FLAGS_IGNORE_OVERRUN |
+			  IB_CQ_FLAGS_TIMESTAMP_COMPLETION));
 }
 
 static inline int verify_assign_uidx(u8 cqe_version, u32 cmd_uidx,
