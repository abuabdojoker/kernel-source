From: Egbert Eich <eich@suse.de>
Date: Fri Jun 20 19:29:11 2014 +0200
Subject: drm/mgag200: Consolidate depth/bpp handling
Patch-mainline: to be upstreamed

References: bnc#882324
Signed-off-by: Egbert Eich <eich@suse.com>

The depth/bpp handling for chips with limited memory in commit commit
  918be888d613e58938338b4b0c895de97579173d
  Author: Dave Airlie <airlied@redhat.com>
  Date:   Tue Jan 21 01:47:46 2014 -0500

    drm/mgag200: on cards with < 2MB VRAM default to 16-bit

    This aligns with what the userspace -mga driver does in
    the same situation.

was incomplete: The bpp limits were applied to mode validation
This consolidates dpeth/bpp handling, adds it to mode validation
and moves the code which reads the command line specified depth
into the correct location.

Signed-off-by: Egbert Eich <eich@suse.de>
---
 drivers/gpu/drm/mgag200/mgag200_drv.h  |    2 ++
 drivers/gpu/drm/mgag200/mgag200_fb.c   |    2 +-
 drivers/gpu/drm/mgag200/mgag200_main.c |    8 +++++++-
 drivers/gpu/drm/mgag200/mgag200_mode.c |   30 ++++++++++++++++--------------
 4 files changed, 26 insertions(+), 16 deletions(-)

--- a/drivers/gpu/drm/mgag200/mgag200_drv.h
+++ b/drivers/gpu/drm/mgag200/mgag200_drv.h
@@ -206,6 +206,8 @@ struct mga_device {
 	int				has_sdram;
 	struct drm_display_mode		mode;
 
+	int preferred_bpp;
+
 	int bpp_shifts[4];
 
 	int fb_mtrr;
--- a/drivers/gpu/drm/mgag200/mgag200_fb.c
+++ b/drivers/gpu/drm/mgag200/mgag200_fb.c
@@ -312,7 +312,7 @@ int mgag200_fbdev_init(struct mga_device
 	/* disable all the possible outputs/crtcs before entering KMS mode */
 	drm_helper_disable_unused_functions(mdev->dev);
 
-	drm_fb_helper_initial_config(&mfbdev->helper, 32);
+	drm_fb_helper_initial_config(&mfbdev->helper, mdev->preferred_bpp);
 
 	return 0;
 }
--- a/drivers/gpu/drm/mgag200/mgag200_main.c
+++ b/drivers/gpu/drm/mgag200/mgag200_main.c
@@ -325,7 +325,13 @@ int mgag200_driver_load(struct drm_devic
 
 	drm_mode_config_init(dev);
 	dev->mode_config.funcs = (void *)&mga_mode_funcs;
-	dev->mode_config.preferred_depth = 24;
+	if (IS_G200_SE(mdev) && mdev->mc.vram_size < (2048*1024)) {
+		mdev->preferred_bpp = dev->mode_config.preferred_depth = 16;
+	} else {
+		/* prefer 16bpp on low end gpus with limited VRAM */
+		mdev->preferred_bpp = 32;
+		dev->mode_config.preferred_depth = 24;
+	}
 	dev->mode_config.prefer_shadow = 1;
 
 	r = mgag200_modeset_init(mdev);
--- a/drivers/gpu/drm/mgag200/mgag200_mode.c
+++ b/drivers/gpu/drm/mgag200/mgag200_mode.c
@@ -1571,7 +1571,7 @@ static int mga_vga_mode_valid(struct drm
 	struct drm_fb_helper *fb_helper = &mfbdev->helper;
 	struct drm_fb_helper_connector *fb_helper_conn = NULL;
 	int lace = 1 + ((mode->flags & DRM_MODE_FLAG_INTERLACE) ? 1 : 0);
-	int bpp = 32;
+	int bpp;
 	int i = 0;
 	uint32_t bw;
 
@@ -1579,6 +1579,21 @@ static int mga_vga_mode_valid(struct drm
 	    mode->hsync_end % 8 || mode->htotal % 8)
 		return MODE_H_ILLEGAL;
 
+	bpp = mdev->preferred_bpp;
+        /* Validate the mode input by the user - since we don't have depth information
+	 * in the mode this is the best we can do */
+	for (i = 0; i < fb_helper->connector_count; i++) {
+		if (fb_helper->connector_info[i]->connector == connector) {
+			/* Found the helper for this connector */
+			fb_helper_conn = fb_helper->connector_info[i];
+			if (fb_helper_conn->cmdline_mode.specified) {
+				if (fb_helper_conn->cmdline_mode.bpp_specified){
+					bpp = fb_helper_conn->cmdline_mode.bpp;
+				}
+			}
+		}
+	}
+
 	if (IS_G200_SE(mdev)) {
 		if (mdev->unique_rev_id == 0x01) {
 			if (mode->hdisplay > 1600)
@@ -1652,19 +1667,6 @@ static int mga_vga_mode_valid(struct drm
 		return MODE_BAD;
 	}
 
-	/* Validate the mode input by the user */
-	for (i = 0; i < fb_helper->connector_count; i++) {
-		if (fb_helper->connector_info[i]->connector == connector) {
-			/* Found the helper for this connector */
-			fb_helper_conn = fb_helper->connector_info[i];
-			if (fb_helper_conn->cmdline_mode.specified) {
-				if (fb_helper_conn->cmdline_mode.bpp_specified) {
-					bpp = fb_helper_conn->cmdline_mode.bpp;
-				}
-			}
-		}
-	}
-
 	if ((mode->hdisplay * mode->vdisplay * (bpp/8)) > mdev->mc.vram_size) {
 		if (fb_helper_conn)
 			fb_helper_conn->cmdline_mode.specified = false;
