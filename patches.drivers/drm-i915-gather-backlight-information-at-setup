From 636baebfa62fa31b204bc5a816700bd2fd135e57 Mon Sep 17 00:00:00 2001
From: Jani Nikula <jani.nikula@intel.com>
Date: Fri, 8 Nov 2013 16:49:02 +0200
Subject: [PATCH 10/14] drm/i915: gather backlight information at setup
Git-commit: 636baebfa62fa31b204bc5a816700bd2fd135e57
Patch-mainline: 3.14-rc1
References: bsc#941113

Prepare for being able to use the information at enable.

Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Reviewed-by: Imre Deak <imre.deak@intel.com>
Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
Acked-by: Takashi Iwai <tiwai@suse.de>

---
 drivers/gpu/drm/i915/intel_drv.h   |    2 +
 drivers/gpu/drm/i915/intel_panel.c |   68 ++++++++++++++++++++++++++++++-------
 2 files changed, 58 insertions(+), 12 deletions(-)

--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -164,6 +164,8 @@ struct intel_panel {
 		u32 level;
 		u32 max;
 		bool enabled;
+		bool combination_mode;	/* gen 2/4 only */
+		bool active_low_pwm;
 		struct backlight_device *device;
 	} backlight;
 };
--- a/drivers/gpu/drm/i915/intel_panel.c
+++ b/drivers/gpu/drm/i915/intel_panel.c
@@ -469,13 +469,14 @@ static u32 i9xx_get_backlight(struct int
 {
 	struct drm_device *dev = connector->base.dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct intel_panel *panel = &connector->panel;
 	u32 val;
 
 	val = I915_READ(BLC_PWM_CTL) & BACKLIGHT_DUTY_CYCLE_MASK;
 	if (INTEL_INFO(dev)->gen < 4)
 		val >>= 1;
 
-	if (is_backlight_combination_mode(dev)) {
+	if (panel->backlight.combination_mode) {
 		u8 lbpc;
 
 		pci_read_config_byte(dev->pdev, PCI_LBPC, &lbpc);
@@ -537,7 +538,7 @@ static void i9xx_set_backlight(struct in
 
 	WARN_ON(panel->backlight.max == 0);
 
-	if (is_backlight_combination_mode(dev)) {
+	if (panel->backlight.combination_mode) {
 		u8 lbpc;
 
 		lbpc = level * 0xfe / panel->backlight.max + 1;
@@ -943,46 +944,84 @@ static void intel_backlight_device_unreg
  */
 static int pch_setup_backlight(struct intel_connector *connector)
 {
+	struct drm_device *dev = connector->base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_panel *panel = &connector->panel;
-	u32 val;
+	u32 cpu_ctl2, pch_ctl1, pch_ctl2, val;
 
-	panel->backlight.max = pch_get_max_backlight(connector);
+	pch_ctl1 = I915_READ(BLC_PWM_PCH_CTL1);
+	panel->backlight.active_low_pwm = pch_ctl1 & BLM_PCH_POLARITY;
+
+	pch_ctl2 = I915_READ(BLC_PWM_PCH_CTL2);
+	panel->backlight.max = pch_ctl2 >> 16;
 	if (!panel->backlight.max)
 		return -ENODEV;
 
 	val = pch_get_backlight(connector);
 	panel->backlight.level = intel_panel_compute_brightness(connector, val);
 
+	cpu_ctl2 = I915_READ(BLC_PWM_CPU_CTL2);
+	panel->backlight.enabled = (cpu_ctl2 & BLM_PWM_ENABLE) &&
+		(pch_ctl1 & BLM_PCH_PWM_ENABLE) && panel->backlight.level != 0;
+
 	return 0;
 }
 
 static int i9xx_setup_backlight(struct intel_connector *connector)
 {
+	struct drm_device *dev = connector->base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_panel *panel = &connector->panel;
-	u32 val;
+	u32 ctl, val;
+
+	ctl = I915_READ(BLC_PWM_CTL);
+
+	if (IS_GEN2(dev))
+		panel->backlight.combination_mode = ctl & BLM_LEGACY_MODE;
+
+	if (IS_PINEVIEW(dev))
+		panel->backlight.active_low_pwm = ctl & BLM_POLARITY_PNV;
+
+	panel->backlight.max = ctl >> 17;
+	if (panel->backlight.combination_mode)
+		panel->backlight.max *= 0xff;
 
-	panel->backlight.max = i9xx_get_max_backlight(connector);
 	if (!panel->backlight.max)
 		return -ENODEV;
 
 	val = i9xx_get_backlight(connector);
 	panel->backlight.level = intel_panel_compute_brightness(connector, val);
 
+	panel->backlight.enabled = panel->backlight.level != 0;
+
 	return 0;
 }
 
 static int i965_setup_backlight(struct intel_connector *connector)
 {
+	struct drm_device *dev = connector->base.dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_panel *panel = &connector->panel;
-	u32 val;
+	u32 ctl, ctl2, val;
+
+	ctl2 = I915_READ(BLC_PWM_CTL2);
+	panel->backlight.combination_mode = ctl2 & BLM_COMBINATION_MODE;
+	panel->backlight.active_low_pwm = ctl2 & BLM_POLARITY_I965;
+
+	ctl = I915_READ(BLC_PWM_CTL);
+	panel->backlight.max = ctl >> 16;
+	if (panel->backlight.combination_mode)
+		panel->backlight.max *= 0xff;
 
-	panel->backlight.max = i965_get_max_backlight(connector);
 	if (!panel->backlight.max)
 		return -ENODEV;
 
 	val = i9xx_get_backlight(connector);
 	panel->backlight.level = intel_panel_compute_brightness(connector, val);
 
+	panel->backlight.enabled = (ctl2 & BLM_PWM_ENABLE) &&
+		panel->backlight.level != 0;
+
 	return 0;
 }
 
@@ -992,7 +1031,7 @@ static int vlv_setup_backlight(struct in
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct intel_panel *panel = &connector->panel;
 	enum pipe pipe;
-	u32 val;
+	u32 ctl, ctl2, val;
 
 	for_each_pipe(pipe) {
 		u32 cur_val = I915_READ(VLV_BLC_PWM_CTL(pipe));
@@ -1006,13 +1045,20 @@ static int vlv_setup_backlight(struct in
 			   cur_val);
 	}
 
-	panel->backlight.max = _vlv_get_max_backlight(dev, PIPE_A);
+	ctl2 = I915_READ(VLV_BLC_PWM_CTL2(PIPE_A));
+	panel->backlight.active_low_pwm = ctl2 & BLM_POLARITY_I965;
+
+	ctl = I915_READ(VLV_BLC_PWM_CTL(PIPE_A));
+	panel->backlight.max = ctl >> 16;
 	if (!panel->backlight.max)
 		return -ENODEV;
 
 	val = _vlv_get_backlight(dev, PIPE_A);
 	panel->backlight.level = intel_panel_compute_brightness(connector, val);
 
+	panel->backlight.enabled = (ctl2 & BLM_PWM_ENABLE) &&
+		panel->backlight.level != 0;
+
 	return 0;
 }
 
@@ -1036,8 +1082,6 @@ int intel_panel_setup_backlight(struct d
 		return ret;
 	}
 
-	panel->backlight.enabled = panel->backlight.level != 0;
-
 	intel_backlight_device_register(intel_connector);
 
 	panel->backlight.present = true;
