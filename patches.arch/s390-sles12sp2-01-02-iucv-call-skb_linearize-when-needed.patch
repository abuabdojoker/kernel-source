From: Eugene Crosser <Eugene.Crosser@ru.ibm.com>
Subject: iucv: call skb_linearize() when needed
Patch-mainline: v4.5-rc1
Git-commit: 979f66b32dbbf928635dbf44fd9843d27c4ed8f9
References: bnc#980892, LTC#141240

Description:  af_iucv: call skb_linearize() when needed
Symptom:      When there is high traffic over multiple af_iucv
              connectionsover HiperSockets, the receiving side
              eventually runs into kernel BUG().
Problem:      When allocated buffer for the outgoing af_iucv message
              starts just before the page boundary, and IUCV transport
              has to send it as two separate QDIO buffer elements,
              with fist element shorter than the header. Then, on the
              receiving side, the first (linear) part of the skb is
              shorter than the header.
Solution:     When the linear buffer of the received sk_buffis shorter
              than the header, use skb_linearize().
Reproduction: Run high traffic over multiple af_iucv connections between
              two LPARs.

Upstream-Description:

              iucv: call skb_linearize() when needed

              When the linear buffer of the received sk_buff is shorter than
              the header, use skb_linearize(). sk_buffs with short linear buffer
              happen on the sending side under high traffic, and some kernel
              configurations, when allocated buffer starts just before page
              boundary, and IUCV transport has to send it as two separate QDIO
              buffer elements, with fist element shorter than the header.

              Signed-off-by: Eugene Crosser <Eugene.Crosser@ru.ibm.com>
              Signed-off-by: Ursula Braun <ubraun@linux.vnet.ibm.com>
              Signed-off-by: David S. Miller <davem@davemloft.net>


Signed-off-by: Eugene Crosser <Eugene.Crosser@ru.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 net/iucv/af_iucv.c |   20 +++++++++++++++-----
 1 file changed, 15 insertions(+), 5 deletions(-)

--- a/net/iucv/af_iucv.c
+++ b/net/iucv/af_iucv.c
@@ -2087,11 +2087,7 @@ static int afiucv_hs_callback_rx(struct
 		return NET_RX_SUCCESS;
 	}
 
-		/* write stuff from iucv_msg to skb cb */
-	if (skb->len < sizeof(struct af_iucv_trans_hdr)) {
-		kfree_skb(skb);
-		return NET_RX_SUCCESS;
-	}
+	/* write stuff from iucv_msg to skb cb */
 	skb_pull(skb, sizeof(struct af_iucv_trans_hdr));
 	skb_reset_transport_header(skb);
 	skb_reset_network_header(skb);
@@ -2122,6 +2118,20 @@ static int afiucv_hs_rcv(struct sk_buff
 	char nullstring[8];
 	int err = 0;
 
+	if (skb->len < (ETH_HLEN + sizeof(struct af_iucv_trans_hdr))) {
+		WARN_ONCE(1, "AF_IUCV too short skb, len=%d, min=%d",
+			  (int)skb->len,
+			  (int)(ETH_HLEN + sizeof(struct af_iucv_trans_hdr)));
+		kfree_skb(skb);
+		return NET_RX_SUCCESS;
+	}
+	if (skb_headlen(skb) < (ETH_HLEN + sizeof(struct af_iucv_trans_hdr)))
+		if (skb_linearize(skb)) {
+			WARN_ONCE(1, "AF_IUCV skb_linearize failed, len=%d",
+				  (int)skb->len);
+			kfree_skb(skb);
+			return NET_RX_SUCCESS;
+		}
 	skb_pull(skb, ETH_HLEN);
 	trans_hdr = (struct af_iucv_trans_hdr *)skb->data;
 	EBCASC(trans_hdr->destAppName, sizeof(trans_hdr->destAppName));
