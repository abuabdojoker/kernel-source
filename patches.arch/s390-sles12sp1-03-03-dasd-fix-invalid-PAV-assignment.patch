From: Stefan Haberland <stefan.haberland@de.ibm.com>
Subject: s390/dasd: fix invalid PAV assignment after suspend/resume
Patch-mainline: v4.4-rc1
Git-commit: 251afd69e3328653bae4a8ca09700971ca4000c5
References: bnc#954986, LTC#132706

Description:  dasd: fix invalid PAV assignment after suspend/resume
Symptom:      Performance drop or inaccessible device after suspend
              resume cycle.
Problem:      For a valid PAV assignment the DASD driver needs to
              notice possible changed configuration data.
Solution:     The failing of read configuration data should also fail
              the device restore to prevent invalid PAV
              assignment. The failed device may get restored after
              additional paths get available later on. If the restore
              fails after the device was added to the lcu alias
              handling it needs to be removed from the alias handling
              before exiting the restore function.
Reproduction: Do suspend resume and disconnect one path in suspended
              state.

Upstream-Description:

              s390/dasd: fix invalid PAV assignment after suspend/resume

              For a valid PAV assignment the DASD driver needs to notice possibly
              changed configuration data. Thus the failing of read configuration
              data should also fail the device restore to prevent invalid PAV
              assignment. The failed device may get restored after additional paths
              get available later on.
              If the restore fails after the device was added to the lcu alias
              handling it needs to be removed from the alias handling before exiting
              the restore function.

              Reviewed-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
              Signed-off-by: Stefan Haberland <stefan.haberland@de.ibm.com>
              Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Stefan Haberland <stefan.haberland@de.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 drivers/s390/block/dasd_eckd.c |   20 ++++++++++++++++----
 1 file changed, 16 insertions(+), 4 deletions(-)

--- a/drivers/s390/block/dasd_eckd.c
+++ b/drivers/s390/block/dasd_eckd.c
@@ -4378,7 +4378,12 @@ static int dasd_eckd_restore_device(stru
 	private = (struct dasd_eckd_private *) device->private;
 
 	/* Read Configuration Data */
-	dasd_eckd_read_conf(device);
+	rc = dasd_eckd_read_conf(device);
+	if (rc) {
+		DBF_EVENT_DEVID(DBF_WARNING, device->cdev,
+				"Read configuration data failed, rc=%d", rc);
+		goto out_err;
+	}
 
 	dasd_eckd_get_uid(device, &temp_uid);
 	/* Generate device unique id */
@@ -4394,13 +4399,18 @@ static int dasd_eckd_restore_device(stru
 	/* register lcu with alias handling, enable PAV if this is a new lcu */
 	rc = dasd_alias_make_device_known_to_lcu(device);
 	if (rc)
-		return rc;
+		goto out_err;
 
 	set_bit(DASD_CQR_FLAGS_FAILFAST, &cqr_flags);
 	dasd_eckd_validate_server(device, cqr_flags);
 
 	/* RE-Read Configuration Data */
-	dasd_eckd_read_conf(device);
+	rc = dasd_eckd_read_conf(device);
+	if (rc) {
+		DBF_EVENT_DEVID(DBF_WARNING, device->cdev,
+			"Read configuration data failed, rc=%d", rc);
+		goto out_err2;
+	}
 
 	/* Read Feature Codes */
 	dasd_eckd_read_features(device);
@@ -4411,7 +4421,7 @@ static int dasd_eckd_restore_device(stru
 	if (rc) {
 		DBF_EVENT_DEVID(DBF_WARNING, device->cdev,
 				"Read device characteristic failed, rc=%d", rc);
-		goto out_err;
+		goto out_err2;
 	}
 	spin_lock_irqsave(get_ccwdev_lock(device->cdev), flags);
 	memcpy(&private->rdc_data, &temp_rdc_data, sizeof(temp_rdc_data));
@@ -4422,6 +4432,8 @@ static int dasd_eckd_restore_device(stru
 
 	return 0;
 
+out_err2:
+	dasd_alias_disconnect_device_from_lcu(device);
 out_err:
 	return -1;
 }
